[{"type":"Page","content":[{"url":"guide/00-introduction","type":"Redirect"}],"lastModifiedTime":0,"tocItem":{"chapterTitle":"","pageTitle":"","pageMeta":{},"dirName":"","fileName":"index","viewOnRelativePath":null,"pageSectionIdTitles":[]}},{"type":"Page","content":[{"type":"Paragraph","content":[{"text":"This guide will teach you how to build user interfaces in the browser","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"using several libraries, primarily ","type":"SimpleText"},{"code":"Bonsai","type":"InlinedCode"},{"text":" and ","type":"SimpleText"},{"code":"Virtual_dom","type":"InlinedCode"},{"text":". Together,","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"these libraries allow you to build applications in a functional style","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"instead of the imperative style encouraged by the browser's API.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"In this guide we aim to explain how to use Bonsai, and, to a lesser","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"degree, how Bonsai works under the hood. We hope that the latter will","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"equip you with the knowledge necessary to tune the performance of your","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"applications.","type":"SimpleText"}]},{"id":"web-apps-at-10000-feet","title":"Web Apps at 10,000 Feet","type":"Section","content":[{"type":"Paragraph","content":[{"text":"The browser understands three languages: Javascript, HTML, CSS. Jane","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Street programmers only understand one language: OCaml. Thus, we've made","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"it possible to write all three of the browser languages using OCaml.","type":"SimpleText"}]},{"bulletMarker":"-","tight":true,"type":"BulletList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"code":"js_of_ocaml","type":"InlinedCode"},{"text":" is an OCaml-to-Javascript compiler.","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"code":"virtual_dom","type":"InlinedCode"},{"text":" is a library for building values that represent a","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"chunk of HTML.","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"code":"css_gen","type":"InlinedCode"},{"text":" is a library for writing CSS styles in a type safe manner.","type":"SimpleText"}]}]}]},{"type":"Paragraph","content":[{"text":"The CSS situation is a little more nuanced, since we actually recommend","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"writing CSS directly using ","type":"SimpleText"},{"code":"ppx_css","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"A user interface is a function from ","type":"SimpleText"},{"type":"Emphasis","content":[{"text":"data","type":"SimpleText"}]},{"text":" to ","type":"SimpleText"},{"type":"Emphasis","content":[{"text":"view","type":"SimpleText"}]},{"text":". In types:","type":"SimpleText"}]},{"lang":"ocaml","snippet":"(* Virtual_dom.Vdom.Node.t represents your application's view *)\nopen Virtual_dom\n\nval ui : Your_input_type_here.t -> Vdom.Node.t\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"It's easy to write composable views with such functions, since all you","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"need to return is a plain old OCaml value. A small amount of boilerplate","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"can turn this function into a simple web app that continuously displays","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"the result of the function.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Of course, this is a huge simplification; in a real app, you usually","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"want:","type":"SimpleText"}]},{"bulletMarker":"-","tight":true,"type":"BulletList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"type":"Emphasis","content":[{"text":"Interactivity","type":"SimpleText"}]},{"text":", so the user can click on, type into, and navigate","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"through things.","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"type":"Emphasis","content":[{"text":"Incrementality","type":"SimpleText"}]},{"text":", so that large amounts of highly dynamically data","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"can be displayed without the interface lagging.","type":"SimpleText"}]}]}]},{"type":"Paragraph","content":[{"text":"Bonsai provides these features while still encouraging the composition","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"and abstraction properties of regular OCaml code. Bonsai wants you to","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"forget it is there. The signature of a Bonsai app looks a bit like this:","type":"SimpleText"}]},{"lang":"ocaml","snippet":"open Bonsai_web\n\nval ui : Your_input_type_here.t Value.t -> Vdom.Node.t Computation.t\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"It's just like before, except the input is wrapped with ","type":"SimpleText"},{"code":"Value.t","type":"InlinedCode"},{"text":" and","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"the output is wrapped with ","type":"SimpleText"},{"code":"Computation.t","type":"InlinedCode"},{"text":". While there is slightly more","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"friction, writing re-usable UI components is just as easy. In addition,","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"we've expanded the kinds of components you can write, since","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"Computation.t","type":"InlinedCode"},{"text":" encapsulates incremental state machines, which is how","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"interactivity is added to an interface.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Both these types are covered in detail in chapters ","type":"SimpleText"},{"url":"/bonsai/guide/02-dynamism","isFile":false,"type":"Link","content":[{"text":"2","type":"SimpleText"}]},{"type":"SoftLineBreak"},{"text":"and ","type":"SimpleText"},{"url":"/bonsai/guide/03-state","isFile":false,"type":"Link","content":[{"text":"3","type":"SimpleText"}]},{"text":".","type":"SimpleText"}]}]},{"id":"the-underlying-machinery","title":"The Underlying Machinery","type":"Section","content":[{"type":"Paragraph","content":[{"text":"The incrementality in Bonsai comes from the ","type":"SimpleText"},{"code":"Incremental","type":"InlinedCode"},{"text":" library. When","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"a web page loads, Bonsai compiles the top-level","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"Vdom.Node.t Computation.t","type":"InlinedCode"},{"text":" into something akin to ","type":"SimpleText"},{"code":"Vdom.Node.t Incr.t","type":"InlinedCode"},{"text":".","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Then the ","type":"SimpleText"},{"code":"Incr_dom","type":"InlinedCode"},{"text":" library handles running the main loop to keep the","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"incremental graph stabilized (i.e. up-to-date).","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"The ","type":"SimpleText"},{"code":"Vdom.Node.t","type":"InlinedCode"},{"text":" representing the current view gets put onto the screen","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"via a diff-and-patch process. The ","type":"SimpleText"},{"code":"virtual_dom","type":"InlinedCode"},{"text":" library always keeps","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"track of the previous ","type":"SimpleText"},{"code":"Vdom.Node.t","type":"InlinedCode"},{"text":" that it told the browser to display.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Whenever we request a ","type":"SimpleText"},{"type":"Emphasis","content":[{"text":"new","type":"SimpleText"}]},{"text":" ","type":"SimpleText"},{"code":"Vdom.Node.t","type":"InlinedCode"},{"text":" to be displayed on the screen,","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"the library first compares it to the previous view to see what changed,","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"and then it applies ","type":"SimpleText"},{"type":"Emphasis","content":[{"text":"just those changes","type":"SimpleText"}]},{"text":" to what the browser is","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"displaying.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Details regarding Incremental, and the virtual-dom diff-and-patch","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"strategy are abstracted away so you'll rarely need to think about them.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"However, a good cost model will help you to avoid or debug performance","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"pitfalls. Throughout the rest of this guide, we will endeavor to provide","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"such a cost model.","type":"SimpleText"}]}]}],"lastModifiedTime":1695814630491,"tocItem":{"chapterTitle":"Guide","pageTitle":"Introduction","pageMeta":{"title":["Introduction"]},"dirName":"guide","fileName":"00-introduction","viewOnRelativePath":null,"pageSectionIdTitles":[{"title":"Web Apps at 10,000 Feet","id":"web-apps-at-10000-feet"},{"title":"The Underlying Machinery","id":"the-underlying-machinery"}]}},{"type":"Page","content":[{"type":"Paragraph","content":[{"text":"Browser interfaces are described by a tree of HTML ","type":"SimpleText"},{"type":"Emphasis","content":[{"text":"elements","type":"SimpleText"}]},{"text":", each of","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"which can have some ","type":"SimpleText"},{"type":"Emphasis","content":[{"text":"attributes","type":"SimpleText"}]},{"text":" attached. The ","type":"SimpleText"},{"code":"virtual_dom","type":"InlinedCode"},{"text":" library","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"provides an OCaml interface for constructing these trees.","type":"SimpleText"}]},{"id":"vdom-node-t","title":"Vdom.Node.t","type":"Section","content":[{"type":"Paragraph","content":[{"text":"This wouldn't be a programming tutorial without a hello world example,","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"which introduces the ","type":"SimpleText"},{"code":"Vdom.Node.text","type":"InlinedCode"},{"text":" node constructor.","type":"SimpleText"}]},{"lang":"ocaml","snippet":"let hello_world : Vdom.Node.t = Vdom.Node.text \"hello world!\"\n","lineNumber":"","type":"Snippet"},{"src":"/bonsai/bonsai-build/#hello_world","fit":true,"light":{"background":"#e9edf2","color-scheme":"light","color":"#28487c"},"dark":{"background":"#101318","color-scheme":"dark","color":"#bac9e2"},"type":"Iframe"},{"type":"Paragraph","content":[{"text":"The text node will frequently be the \"leaf\" of a view (there are no","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"\"children\" of a text node). Let's put some text inside a bulleted list","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"by using some more node constructors:","type":"SimpleText"}]},{"lang":"ocaml","snippet":"let bulleted_list : Vdom.Node.t =\n  let open Vdom.Node in\n  div\n    [ h3 [ text \"Norwegian Pancakes\" ]\n    ; ul\n        [ li [ text \"3 eggs\" ]\n        ; li [ text \"2 cups of milk\" ]\n        ; li [ text \"1 cup of flour\" ]\n        ]\n    ]\n;;\n","lineNumber":"","type":"Snippet"},{"src":"/bonsai/bonsai-build/#bulleted_list","fit":true,"light":{"background":"#e9edf2","color-scheme":"light","color":"#28487c"},"dark":{"background":"#101318","color-scheme":"dark","color":"#bac9e2"},"type":"Iframe"},{"type":"Paragraph","content":[{"text":"For the bulleted list, the ","type":"SimpleText"},{"code":"ul","type":"InlinedCode"},{"text":" and ","type":"SimpleText"},{"code":"li","type":"InlinedCode"},{"text":" functions are required. These","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"correspond to the ","type":"SimpleText"},{"url":"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul","isFile":false,"type":"Link","content":[{"text":"ul","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"element","type":"SimpleText"}]},{"type":"SoftLineBreak"},{"text":"and the ","type":"SimpleText"},{"url":"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/li","isFile":false,"type":"Link","content":[{"text":"li","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"element","type":"SimpleText"}]},{"text":",","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"which MDN helpfully tells us stands for ","type":"SimpleText"},{"type":"Emphasis","content":[{"text":"Unordered List","type":"SimpleText"}]},{"text":" and ","type":"SimpleText"},{"type":"Emphasis","content":[{"text":"List Item","type":"SimpleText"}]}]},{"type":"Paragraph","content":[{"code":"h3","type":"InlinedCode"},{"text":" is short for \"header level 3\", and is responsible for the larger","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"font in the title text, and ","type":"SimpleText"},{"code":"div","type":"InlinedCode"},{"text":" is a ","type":"SimpleText"},{"url":"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div","isFile":false,"type":"Link","content":[{"text":"\"content","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"division\"","type":"SimpleText"}]},{"type":"SoftLineBreak"},{"text":"and serves as a useful wrapper for the rest of the content.","type":"SimpleText"}]},{"attentionType":"note","content":[{"type":"Paragraph","content":[{"text":"There is a ","type":"SimpleText"},{"code":"Vdom.Node.*","type":"InlinedCode"},{"text":" node constructor function for ","type":"SimpleText"},{"type":"Emphasis","content":[{"text":"almost","type":"SimpleText"}]},{"text":" every","type":"SimpleText"},{"type":"SoftLineBreak"},{"url":"https://developer.mozilla.org/en-US/docs/Web/HTML/Element","isFile":false,"type":"Link","content":[{"text":"dom node","type":"SimpleText"}]},{"text":".","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"If a constructor is missing, ","type":"SimpleText"},{"code":"Vdom.Node.create","type":"InlinedCode"},{"text":" is available to manually","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"specify the tag, but the ","type":"SimpleText"},{"code":"Virtual_dom","type":"InlinedCode"},{"text":" maintainers gladly accept","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"contributions back to the main library!","type":"SimpleText"}]}],"type":"AttentionBlock"}]},{"id":"vdom-attr-t","title":"Vdom.Attr.t","type":"Section","content":[{"type":"Paragraph","content":[{"text":"An optional argument to the ","type":"SimpleText"},{"code":"Vdom.Node.*","type":"InlinedCode"},{"text":" constructor functions is a","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"Vdom.Attr.t list","type":"InlinedCode"},{"text":". These ","type":"SimpleText"},{"code":"Attr.t","type":"InlinedCode"},{"text":" correspond to ","type":"SimpleText"},{"url":"https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes","isFile":false,"type":"Link","content":[{"text":"DOM","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"attributes","type":"SimpleText"}]},{"text":",","type":"SimpleText"},{"type":"SoftLineBreak"},{"url":"https://developer.mozilla.org/en-US/docs/Web/API/Element#properties","isFile":false,"type":"Link","content":[{"text":"DOM","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"properties","type":"SimpleText"}]},{"text":",","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"and ","type":"SimpleText"},{"url":"https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Event_handlers","isFile":false,"type":"Link","content":[{"text":"DOM","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"event_handlers","type":"SimpleText"}]},{"text":".","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Attributes can be used to tweak the appearance and behavior of the nodes","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"that they are attached to, for instance, by adding placeholder text to a","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"textbox:","type":"SimpleText"}]},{"lang":"ocaml","snippet":"let input_placeholder : Vdom.Node.t =\n  Vdom.Node.input ~attrs:[ Vdom.Attr.placeholder \"placeholder text here\" ] ()\n;;\n","lineNumber":"","type":"Snippet"},{"src":"/bonsai/bonsai-build/#input_placeholder","fit":true,"light":{"background":"#e9edf2","color-scheme":"light","color":"#28487c"},"dark":{"background":"#101318","color-scheme":"dark","color":"#bac9e2"},"type":"Iframe"},{"type":"Paragraph","content":[{"text":"Or coloring text with inline css:","type":"SimpleText"}]},{"lang":"ocaml","snippet":"let css_gen : Vdom.Node.t =\n  Vdom.Node.span\n    ~attrs:[ Vdom.Attr.style (Css_gen.color (`Name \"red\")) ]\n    [ Vdom.Node.text \"this text is red\" ]\n;;\n","lineNumber":"","type":"Snippet"},{"src":"/bonsai/bonsai-build/#css_gen","fit":true,"light":{"background":"#e9edf2","color-scheme":"light","color":"#28487c"},"dark":{"background":"#101318","color-scheme":"dark","color":"#bac9e2"},"type":"Iframe"},{"type":"Paragraph","content":[{"url":"/bonsai/guide/08-css","isFile":false,"type":"Link","content":[{"text":"The 8th chapter \"css\"","type":"SimpleText"}]},{"text":" goes into much more depth on the","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"styling attributes.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Finally, there are \"event handler\" attributes which register functions","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"that are called when a user interacts with the element (like clicking on","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"buttons or typing into a text box).","type":"SimpleText"}]},{"lang":"ocaml","snippet":"let clicky : Vdom.Node.t =\n  Vdom.Node.button\n    ~attrs:\n      [ Vdom.Attr.on_click (fun (_evt : mouse_event) ->\n          alert \"hello there!\";\n          Ui_effect.Ignore)\n      ]\n    [ Vdom.Node.text \"click me!\" ]\n;;\n","lineNumber":"","type":"Snippet"},{"src":"/bonsai/bonsai-build/#clicky_button","fit":true,"light":{"background":"#e9edf2","color-scheme":"light","color":"#28487c"},"dark":{"background":"#101318","color-scheme":"dark","color":"#bac9e2"},"type":"Iframe"},{"type":"Paragraph","content":[{"text":"These functions usually receive a browser-level event value (ignored in","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"the above example as ","type":"SimpleText"},{"code":"_evt","type":"InlinedCode"},{"text":") alongside any useful data extracted from","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"that event. For example, see the following event-handler attributes for","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"mouse-clicks and typing into a textbox:","type":"SimpleText"}]},{"lang":"ocaml","snippet":"val Vdom.Attr.on_click : (mouse_event -> unit Vdom.Effect.t) -> \n  Vdom.Attr.t val Vdom.Attr.on_input : (input_event -> string -> unit Vdom.Effect.t) -> Vdom.Attr.t\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"You'll notice that because ","type":"SimpleText"},{"code":"on_input","type":"InlinedCode"},{"text":" is used to respond to users typing","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"into a textbox, the handler function is also given a string that holds","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"the current contents of that textbox.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"The browser-level event-values like ","type":"SimpleText"},{"code":"mouse_event","type":"InlinedCode"},{"text":" and ","type":"SimpleText"},{"code":"input_event","type":"InlinedCode"},{"text":" are","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"almost always ignored in Bonsai apps.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"The return type for these event handler functions is","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"unit Vdom.Effect.t","type":"InlinedCode"},{"text":", which is the final type that we care about in the","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"Virtual_dom","type":"InlinedCode"},{"text":" library.","type":"SimpleText"}]}]},{"id":"unit-vdom-effect-t","title":"unit Vdom.Effect.t","type":"Section","content":[{"type":"Paragraph","content":[{"text":"In the example above, the ","type":"SimpleText"},{"code":"on_click","type":"InlinedCode"},{"text":" handler function returned","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"Vdom.Effect.Ignore","type":"InlinedCode"},{"text":". However, the alert definitely fires when you click","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"on it, so what is this value doing, and why must these event-handlers","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"return values of type ","type":"SimpleText"},{"code":"unit Vdom.Effect.t","type":"InlinedCode"},{"text":" in the first place?","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"In reality, values of type ","type":"SimpleText"},{"code":"unit Vdom.Effect.t","type":"InlinedCode"},{"text":" are used to schedule","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"work on Bonsai's event-queue. ","type":"SimpleText"},{"code":"Vdom.Effect.Ignore","type":"InlinedCode"},{"text":" is the no-op event,","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"and it schedules no work on the event-queue.","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"Vdom.Effect.Many [a; b; c]","type":"InlinedCode"},{"text":" wraps up multiple events, scheduling them","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"all in order.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"That leaves us with two more question:","type":"SimpleText"}]},{"delimiter":".","startNumber":1,"type":"OrderedList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"How do I get values of type ","type":"SimpleText"},{"code":"unit Vdom.Effect.t","type":"InlinedCode"},{"text":" that aren't just","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"Ignore","type":"InlinedCode"},{"text":" and ","type":"SimpleText"},{"code":"Many","type":"InlinedCode"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Why would I want to use the Bonsai event queue anyway?","type":"SimpleText"}]}]}]},{"type":"Paragraph","content":[{"text":"Both of which will be answered in ","type":"SimpleText"},{"url":"/bonsai/guide/03-state","isFile":false,"type":"Link","content":[{"text":"Bonsai Guide Part 3:","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"State","type":"SimpleText"}]},{"text":".","type":"SimpleText"}]},{"attentionType":"note","content":[{"type":"Paragraph","content":[{"code":"unit Vdom.Effect.t","type":"InlinedCode"},{"text":" is actually an alias for ","type":"SimpleText"},{"code":"unit Ui_effect.t","type":"InlinedCode"},{"text":". They","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"are the same type, and it's merely re-exported from the ","type":"SimpleText"},{"code":"Vdom","type":"InlinedCode"},{"text":" library","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"as a convenience. If you see a ","type":"SimpleText"},{"code":"unit Ui_effect.t","type":"InlinedCode"},{"text":" (either in another","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"library, or from merlin), know that it is the same thing as","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"unit Vdom.Effect.t","type":"InlinedCode"},{"text":".","type":"SimpleText"}]}],"type":"AttentionBlock"}]},{"id":"the-underlying-machinery","title":"The Underlying Machinery","type":"Section","content":[{"type":"Paragraph","content":[{"text":"A virtual-DOM is an immutable tree of immutable UI elements that","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"represents the view of the application at a point in time. This is in","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"contrast to ","type":"SimpleText"},{"url":"https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model","isFile":false,"type":"Link","content":[{"text":"the DOM (Document Object","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Model)","type":"SimpleText"}]},{"text":",","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"which is a mutable tree of mutable UI elements.","type":"SimpleText"}]},{"attentionType":"note","content":[{"type":"Paragraph","content":[{"text":"The term \"virtual-DOM\" is not unique to Bonsai. Many other UI libraries","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"like ","type":"SimpleText"},{"url":"https://reactjs.org/docs/faq-internals.html","isFile":false,"type":"Link","content":[{"text":"React","type":"SimpleText"}]},{"text":",","type":"SimpleText"},{"type":"SoftLineBreak"},{"url":"https://github.com/elm/virtual-DOM","isFile":false,"type":"Link","content":[{"text":"Elm","type":"SimpleText"}]},{"text":", and","type":"SimpleText"},{"type":"SoftLineBreak"},{"url":"https://vuejs.org/v2/guide/render-function.html#The-Virtual-DOM","isFile":false,"type":"Link","content":[{"text":"Vue","type":"SimpleText"}]},{"type":"SoftLineBreak"},{"text":"have their own \"virtual-DOM\" libraries that all share similar goals.","type":"SimpleText"}]}],"type":"AttentionBlock"},{"type":"Paragraph","content":[{"text":"With the (not-virtual) DOM, the program mutates the tree of UI","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"components in order to update the view, but with the virtual-DOM, the","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"program produces a new tree every time the view changes. While this may","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"appear to be a performance nightmare, many of the tools that we use to","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"reduce duplication of work in regular programs also work well to prevent","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"re-computing parts of this sub-view.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"The ","type":"SimpleText"},{"code":"Virtual_dom","type":"InlinedCode"},{"text":" library also contains functions that diff two versions","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"of a virtual-dom tree. The diff can be used as instructions for mutating","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"the DOM to reflect the contents of the \"next\" virtual-DOM node. These","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"functions are quite fundamental, but Bonsai handles the calls to these","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"functions, so application developers are solely concerned with producing","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"new vdom trees.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Let's continue to ","type":"SimpleText"},{"url":"/bonsai/guide/02-dynamism","isFile":false,"type":"Link","content":[{"text":"Bonsai Guide Part 2: Dynamism","type":"SimpleText"}]},{"text":".","type":"SimpleText"}]}]}],"lastModifiedTime":1695814630493,"tocItem":{"chapterTitle":"Guide","pageTitle":"Virtual-dom","pageMeta":{"title":["Virtual-dom"]},"dirName":"guide","fileName":"01-virtual_dom","viewOnRelativePath":null,"pageSectionIdTitles":[{"title":"Vdom.Node.t","id":"vdom-node-t"},{"title":"Vdom.Attr.t","id":"vdom-attr-t"},{"title":"unit Vdom.Effect.t","id":"unit-vdom-effect-t"},{"title":"The Underlying Machinery","id":"the-underlying-machinery"}]}},{"type":"Page","content":[{"type":"Paragraph","content":[{"text":"Dynamism is central to engaging applications: as the state of the world","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"changes, so should the UI.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"The previous chapter introduced an immutable view type, ","type":"SimpleText"},{"code":"Vdom.Node.t","type":"InlinedCode"},{"type":"SoftLineBreak"},{"text":"along with the idea that the UI is a function from data to view. For","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"large and dynamic input data, this function is expensive and must run","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"quite often. To keep up with quickly changing data, we would like to","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"only re-compute the parts of the view that depend on newly changed data.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"This chapter takes a detour from the theme of computing web UIs to","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"investigate the core Bonsai abstractions. It may be surprising to know","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"that Bonsai isn't specialized for user interfaces; rather, it answers","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"the very generic question of how to build composable incremental","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"state-machines. As it turns out, incremental state-machines are a great","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"abstraction for building UI!","type":"SimpleText"}]},{"attentionType":"note","content":[{"type":"Paragraph","content":[{"text":"This chapter is more complicated than we might like due to a","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"longstanding quirk of Bonsai's architecture. We'll begin by describing","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"the more ideal way to think about Bonsai, and then we'll explain why it","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"isn't quite accurate.","type":"SimpleText"}]}],"type":"AttentionBlock"},{"id":"values-and-computations","title":"Values and computations","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Bonsai is all about constructing incremental state machine graphs. A","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"'a Value.t","type":"InlinedCode"},{"text":" is a node in a graph that represents a ","type":"SimpleText"},{"code":"'a","type":"InlinedCode"},{"text":" that changes","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"over time. A ","type":"SimpleText"},{"code":"'a Computation.t","type":"InlinedCode"},{"text":" is an entire graph that might contain","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"many ","type":"SimpleText"},{"code":"Value.t","type":"InlinedCode"},{"text":" of different types, but culminates in a ","type":"SimpleText"},{"code":"'a Value.t","type":"InlinedCode"},{"text":". The","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"motivation for having two types will be thoroughly explored later, but","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"let us start with something basic: building a graph that computes a","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"value that depends on two other values.","type":"SimpleText"}]},{"lang":"ocaml","snippet":"let juxtapose_digits ~(delimiter : string) (a : int Value.t) (b : int Value.t)\n  : string Computation.t\n  =\n  let%arr a = a\n  and b = b in\n  Int.to_string a ^ delimiter ^ Int.to_string b\n;;\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"The two phrases ","type":"SimpleText"},{"code":"a = a","type":"InlinedCode"},{"text":" and ","type":"SimpleText"},{"code":"b = b","type":"InlinedCode"},{"text":" may look a little silly, but they","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"are necessary. The expression on the right-hand side of both bindings in","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"the ","type":"SimpleText"},{"code":"let%arr","type":"InlinedCode"},{"text":" has type ","type":"SimpleText"},{"code":"int Value.t","type":"InlinedCode"},{"text":", but the pattern on the left hand","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"side is a plain old ","type":"SimpleText"},{"code":"int","type":"InlinedCode"},{"text":" that we can freely pass to ","type":"SimpleText"},{"code":"Int.to_string","type":"InlinedCode"},{"text":". So","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"let%arr","type":"InlinedCode"},{"text":" is useful for \"unwrapping\" the data inside a ","type":"SimpleText"},{"code":"Value.t","type":"InlinedCode"},{"text":" so that","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"we can access it for a limited scope.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"The type of the entire ","type":"SimpleText"},{"code":"let%arr","type":"InlinedCode"},{"text":" expression, which includes the stuff on","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"both sides of ","type":"SimpleText"},{"code":"in","type":"InlinedCode"},{"text":", is ","type":"SimpleText"},{"code":"string Computation.t","type":"InlinedCode"},{"text":" rather than","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"string Value.t","type":"InlinedCode"},{"text":". This means that the result is a graph and not a node","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"in a graph. To obtain the final node of a ","type":"SimpleText"},{"code":"Computation.t","type":"InlinedCode"},{"text":" graph, we can","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"use a ","type":"SimpleText"},{"code":"let%sub","type":"InlinedCode"},{"text":" expression.","type":"SimpleText"}]},{"lang":"ocaml","snippet":"let _juxtapose_and_sum (a : int Value.t) (b : int Value.t) : string Computation.t =\n  let%sub juxtaposed = juxtapose_digits ~delimiter:\" + \" a b in\n  let%sub sum =\n    let%arr a = a\n    and b = b in\n    Int.to_string (a + b)\n  in\n  let%arr juxtaposed = juxtaposed\n  and sum = sum in\n  juxtaposed ^ \" = \" ^ sum\n;;\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"We provide a computation and ","type":"SimpleText"},{"code":"let%sub","type":"InlinedCode"},{"text":" provides a name we can use to","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"refer to the result node of that computation. In the first ","type":"SimpleText"},{"code":"let%sub","type":"InlinedCode"},{"type":"SoftLineBreak"},{"text":"above, the computation is ","type":"SimpleText"},{"code":"juxtapose_digits a b","type":"InlinedCode"},{"text":" and the name is","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"juxtaposed","type":"InlinedCode"},{"text":". The important thing about using ","type":"SimpleText"},{"code":"let%sub","type":"InlinedCode"},{"text":" is that","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"juxtaposed","type":"InlinedCode"},{"text":" has type ","type":"SimpleText"},{"code":"string Value.t","type":"InlinedCode"},{"text":", so we can freely use it in","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"let%arr","type":"InlinedCode"},{"text":" expressions.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"A subtle, yet extremely important aspect of ","type":"SimpleText"},{"code":"let%sub","type":"InlinedCode"},{"text":" is that it makes a","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"copy of the input computation, and the node that the name refers to is","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"the result node of that copy, rather than of the original. This means","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"that if you use ","type":"SimpleText"},{"code":"let%sub","type":"InlinedCode"},{"text":" twice on the same computation, you get access","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"to the result nodes for two independent copies of the same graph. All","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"we've encountered so far are pure function computations constructed with","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"let%arr","type":"InlinedCode"},{"text":", so having multiple copies of a graph is useless, since all","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"the copies will always be producing identical results. The ability to","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"copy is useful when computations contain internal state.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"The following example demonstrates how to use ","type":"SimpleText"},{"code":"Bonsai.state","type":"InlinedCode"},{"text":", a","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"primitive computation for introducing internal state to a computation.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Notice that we get access to two result nodes: ","type":"SimpleText"},{"code":"count","type":"InlinedCode"},{"text":" is the state's","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"current value and ","type":"SimpleText"},{"code":"set_count","type":"InlinedCode"},{"text":" is a function for updating that value.","type":"SimpleText"}]},{"lang":"ocaml","snippet":"let (counter_button : Vdom.Node.t Computation.t) =\n  let%sub count, set_count = Bonsai.state 0 in\n  let%arr count = count\n  and set_count = set_count in\n  (* view-construction logic *)\n  Vdom.Node.div\n    [ Vdom.Node.text [%string \"Counter value: %{count#Int}\"]\n    ; Vdom.Node.button\n        ~attrs:[ Vdom.Attr.on_click (fun _ -> set_count (count + 1)) ]\n        [ Vdom.Node.text \"increment count\" ]\n    ]\n;;\n","lineNumber":"","type":"Snippet"},{"src":"/bonsai/bonsai-build/#counter_button","fit":true,"light":{"background":"#e9edf2","color-scheme":"light","color":"#28487c"},"dark":{"background":"#101318","color-scheme":"dark","color":"#bac9e2"},"type":"Iframe"},{"type":"Paragraph","content":[{"text":"Now we can illustrate the power of being able to instantiate a component","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"twice. The following code demonstrates that we can use ","type":"SimpleText"},{"code":"let%sub","type":"InlinedCode"},{"text":" on","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"counter_button","type":"InlinedCode"},{"text":" to get three independent counters.","type":"SimpleText"}]},{"lang":"ocaml","snippet":"let (three_counters : Vdom.Node.t Computation.t) =\n  let%sub counter1 = counter_button in\n  let%sub counter2 = counter_button in\n  let%sub counter3 = counter_button in\n  let%arr counter1 = counter1\n  and counter2 = counter2\n  and counter3 = counter3 in\n  Vdom.Node.div [ counter1; counter2; counter3 ]\n;;\n","lineNumber":"","type":"Snippet"},{"src":"/bonsai/bonsai-build/#three_counters","fit":true,"light":{"background":"#e9edf2","color-scheme":"light","color":"#28487c"},"dark":{"background":"#101318","color-scheme":"dark","color":"#bac9e2"},"type":"Iframe"},{"type":"Paragraph","content":[{"text":"Every time we instantiate ","type":"SimpleText"},{"code":"counter_button","type":"InlinedCode"},{"text":" with ","type":"SimpleText"},{"code":"let%sub","type":"InlinedCode"},{"text":", we get a","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"Vdom.Node.t Value.t","type":"InlinedCode"},{"text":" that represents the final result node of a copy of","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"the ","type":"SimpleText"},{"code":"counter_button","type":"InlinedCode"},{"text":" computation graph. We use ","type":"SimpleText"},{"code":"Vdom.Node.div","type":"InlinedCode"},{"text":" to build","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"a user interface that contains all three buttons so the user can click","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"on them; however, first we need to use ","type":"SimpleText"},{"code":"let%arr","type":"InlinedCode"},{"text":" to get access to the","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"view inside each counter graph node.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"The role of ","type":"SimpleText"},{"code":"let%sub","type":"InlinedCode"},{"text":" in Bonsai is similar to the ","type":"SimpleText"},{"code":"new","type":"InlinedCode"},{"text":" keyword in an","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"object-oriented programming language. Just like ","type":"SimpleText"},{"code":"new","type":"InlinedCode"},{"text":" makes a brand new","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"copy of the specified class with its own independent mutable fields, so","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"also does ","type":"SimpleText"},{"code":"let%sub","type":"InlinedCode"},{"text":" make a brand new copy of the specified computation","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"with its own independent internal state. In addition, just like ","type":"SimpleText"},{"code":"new","type":"InlinedCode"},{"type":"SoftLineBreak"},{"text":"usually yields a reference/pointer (in languages like C# or Java)","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"instead of the data itself, so also does ","type":"SimpleText"},{"code":"let%sub","type":"InlinedCode"},{"text":" yield merely the","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"result node of the newly copied graph instead of the graph itself.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"We've introduced two basic kinds of computations - state, which may be","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"introduced by ","type":"SimpleText"},{"code":"Bonsai.state","type":"InlinedCode"},{"text":", and work, which may be introduced by","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"let%arr","type":"InlinedCode"},{"text":". While these are certainly the most important, Bonsai provides","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"primitive computations for a few other things, such as time-varying and","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"edge-triggering computations.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"We've also introduced the primary means by which you construct larger","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"computations from smaller ones - ","type":"SimpleText"},{"code":"let%sub","type":"InlinedCode"},{"text":". Part of the learning curve","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"of building Bonsai apps is getting comfortable composing together a","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"bunch of little computations.","type":"SimpleText"}]}]},{"id":"the-scary-side-of-values","title":"The scary side of values","type":"Section","content":[{"type":"Paragraph","content":[{"text":"The previous section intentionally did not explain that ","type":"SimpleText"},{"code":"Value.t","type":"InlinedCode"},{"text":" is an","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"applicative, which means that it works with the ","type":"SimpleText"},{"code":"let%map","type":"InlinedCode"},{"text":" syntax, in","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"addition to the ","type":"SimpleText"},{"code":"let%arr","type":"InlinedCode"},{"text":" syntax we've already introduced. The","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"difference between the two is very small: ","type":"SimpleText"},{"code":"let%arr","type":"InlinedCode"},{"text":" expands to the","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"expansion of ","type":"SimpleText"},{"code":"let%map","type":"InlinedCode"},{"text":", except it wraps the entire thing in a call to","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"return","type":"InlinedCode"},{"text":". The following","type":"SimpleText"}]},{"type":"Paragraph","content":[{"code":"ocaml skip let f (x : int Value.t) : int Computation.t =   let%arr x = x in   x + 1","type":"InlinedCode"}]},{"type":"Paragraph","content":[{"text":"expands to","type":"SimpleText"}]},{"type":"Paragraph","content":[{"code":"ocaml skip let f (x : int Value.t) : int Computation.t =   return     (let%map x = x in      x + 1)","type":"InlinedCode"}]},{"type":"Paragraph","content":[{"text":"which further expands to","type":"SimpleText"}]},{"type":"Paragraph","content":[{"code":"ocaml skip let f (x : int Value.t) : int Computation.t =   return (Value.map x ~f:(fun x -> x + 1))","type":"InlinedCode"}]},{"type":"Paragraph","content":[{"text":"The ","type":"SimpleText"},{"code":"Value.t","type":"InlinedCode"},{"text":" applicative interface is scary because re-using the result","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"of a ","type":"SimpleText"},{"code":"let%map","type":"InlinedCode"},{"text":" expression causes the work that it represents to be","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"duplicated. Consider the following computation.","type":"SimpleText"}]},{"lang":"ocaml","snippet":"let component (xs : int list Value.t) : string Computation.t =\n  let sum =\n    let%map xs = xs in\n    List.fold xs ~init:0 ~f:( + )\n  in\n  let average =\n    let%map sum = sum\n    and xs = xs in\n    let length = List.length xs in\n    if length = 0 then 0 else sum / length\n  in\n  let%arr sum = sum\n  and average = average in\n  [%string \"sum = %{sum#Int}, average = %{average#Int}\"]\n;;\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"We would like this computation to only do the work of computing ","type":"SimpleText"},{"code":"sum","type":"InlinedCode"},{"type":"SoftLineBreak"},{"text":"once; however, every usage of ","type":"SimpleText"},{"code":"sum","type":"InlinedCode"},{"text":" entails an iteration through the","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"list. Note that the final result depends on ","type":"SimpleText"},{"code":"sum","type":"InlinedCode"},{"text":" directly, but also","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"indirectly through ","type":"SimpleText"},{"code":"average","type":"InlinedCode"},{"text":"; this means that ","type":"SimpleText"},{"code":"sum","type":"InlinedCode"},{"text":" is computed twice in","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"order to produce the formatted string.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"This explanation seems to contradict the explanation in the beginning of","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"this chapter that computations are graphs and values are nodes in the","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"graph. The truth is that values are also graphs, and re-using a value","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"entails using another copy of that value's graph, thus duplicating any","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"work contained in the graph. To avoid this work duplication, we can","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"instantiate the value with ","type":"SimpleText"},{"code":"let%sub","type":"InlinedCode"},{"text":", but since ","type":"SimpleText"},{"code":"let%sub","type":"InlinedCode"},{"text":" only","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"instantiates computations, we must wrap the ","type":"SimpleText"},{"code":"let%map","type":"InlinedCode"},{"text":" inside a call to","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"return","type":"InlinedCode"},{"text":". For consistency and robustness, we'll apply this","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"transformation to ","type":"SimpleText"},{"code":"average","type":"InlinedCode"},{"text":" as well, even though it is only used once.","type":"SimpleText"}]},{"lang":"ocaml","snippet":"let component (xs : int list Value.t) : string Computation.t =\n  let%sub sum =\n    return\n      (let%map xs = xs in\n       List.fold xs ~init:0 ~f:( + ))\n  in\n  let%sub average =\n    return\n      (let%map sum = sum\n       and xs = xs in\n       let length = List.length xs in\n       if length = 0 then 0 else sum / length)\n  in\n  return\n    (let%map sum = sum\n     and average = average in\n     [%string \"sum = %{sum#Int}, average = %{average#Int}\"])\n;;\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"Before the introduction of ","type":"SimpleText"},{"code":"let%arr","type":"InlinedCode"},{"text":", this was the idiomatic way of","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"using Bonsai. However, now that ","type":"SimpleText"},{"code":"let%arr","type":"InlinedCode"},{"text":" exists, we can transform the","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"above code into the following, exactly equivalent, computation:","type":"SimpleText"}]},{"lang":"ocaml","snippet":"let component (xs : int list Value.t) : string Computation.t =\n  let%sub sum =\n    let%arr xs = xs in\n    List.fold xs ~init:0 ~f:( + )\n  in\n  let%sub average =\n    let%arr sum = sum\n    and xs = xs in\n    let length = List.length xs in\n    if length = 0 then 0 else sum / length\n  in\n  let%arr sum = sum\n  and average = average in\n  [%string \"sum = %{sum#Int}, average = %{average#Int}\"]\n;;\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"While the ","type":"SimpleText"},{"code":"Value.t","type":"InlinedCode"},{"text":" applicative can have surprising behavior, if you","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"restrict yourself to only use ","type":"SimpleText"},{"code":"let%sub","type":"InlinedCode"},{"text":" and ","type":"SimpleText"},{"code":"let%arr","type":"InlinedCode"},{"text":", then you won't","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"ever accidentally duplicate work.","type":"SimpleText"}]}]},{"id":"inputs-to-the-graph","title":"Inputs to the graph","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Dynamic data flows into the graph through ","type":"SimpleText"},{"code":"'a Var.t","type":"InlinedCode"},{"text":", the third main","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"type in Bonsai. A var is similar to a ","type":"SimpleText"},{"code":"ref","type":"InlinedCode"},{"text":" or the analogous","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"'a Incr.Var.t","type":"InlinedCode"},{"text":" from incremental.","type":"SimpleText"}]},{"lang":"ocaml","snippet":"type 'a t\n\n(** Creates a var with an initial value. *)\nval create : 'a -> 'a t\n\n(** Runs a function over the current value and updates it to the result. *)\nval update : 'a t -> f:('a -> 'a) -> unit\n\n(** Change the current value. *)\nval set : 'a t -> 'a -> unit\n\n(** Retrieve the current value. *)\nval get : 'a t -> 'a\n\n(** Get a value that tracks the current value, for use in a computation. *)\nval value : 'a t -> 'a Value.t\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"The typical use-case for a var is that there is some source of","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"ever-changing data, such as a ","type":"SimpleText"},{"code":"Polling_state_rpc","type":"InlinedCode"},{"text":" from a server. The","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Bonsai app will subscribe to these changes with a callback that updates","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"the var with the new data that it received. The main app computation","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"then receives the value-ified var after it has been passed through","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"Var.value","type":"InlinedCode"},{"text":". Here is a concrete example:","type":"SimpleText"}]},{"lang":"ocaml","snippet":"let counter_every_second : int Value.t =\n  let counter_var : int Bonsai.Var.t = Bonsai.Var.create (-1) in\n  every (Time_ns.Span.of_sec 1.0) (fun () ->\n    Bonsai.Var.update counter_var ~f:(fun i -> i + 1));\n  Bonsai.Var.value counter_var\n;;\n\nlet view_for_counter : Vdom.Node.t Computation.t =\n  let%arr counter = counter_every_second in\n  Vdom.Node.textf \"counter: %d\" counter\n;;\n","lineNumber":"","type":"Snippet"},{"src":"/bonsai/bonsai-build/#counter","fit":true,"light":{"background":"#e9edf2","color-scheme":"light","color":"#28487c"},"dark":{"background":"#101318","color-scheme":"dark","color":"#bac9e2"},"type":"Iframe"}]},{"id":"bonsai-is-a-compiler","title":"Bonsai is a compiler","type":"Section","content":[{"type":"Paragraph","content":[{"text":"The ","type":"SimpleText"},{"code":"Bonsai","type":"InlinedCode"},{"text":" library does not provide the logic for stabilizing an","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"incremental function and extracting the output value. Instead, it","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"compiles the value and computation \"surface syntax\" into the \"assembly","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"language\" provided by the ","type":"SimpleText"},{"code":"Incremental","type":"InlinedCode"},{"text":" library. Compilation happens","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"once when the app starts up, and thereafter the main program only","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"interacts with the app in ","type":"SimpleText"},{"code":"Incr.t","type":"InlinedCode"},{"text":" form.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"The Bonsai API is carefully designed to allow its compiler to statically","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"analyze the entire graph. This is why we ","type":"SimpleText"},{"url":"/bonsai/blogs/why_no_bind.md","isFile":true,"type":"Link","content":[{"text":"don't provide","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"bind","type":"SimpleText"}]},{"text":", since the callback passed to ","type":"SimpleText"},{"code":"bind","type":"InlinedCode"},{"text":" is","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"an opaque function. There are few important consequences of the static","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"analyzability of Bonsai graphs:","type":"SimpleText"}]},{"bulletMarker":"-","tight":true,"type":"BulletList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Compilation to incremental nodes only needs to happen once, at","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"startup.","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"We can run \"whole-program analysis\" on the graph to optimize and","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"seriously condense the computation graph.","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"We have the ability to instrument each node in a computation with","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"performance and debugging info. Eventually we plan to use this info","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"to implement a debugger and profiler for Bonsai computations.","type":"SimpleText"}]}]}]}]}],"lastModifiedTime":1695814630495,"tocItem":{"chapterTitle":"Guide","pageTitle":"Dynamism","pageMeta":{"title":["Dynamism"]},"dirName":"guide","fileName":"02-dynamism","viewOnRelativePath":null,"pageSectionIdTitles":[{"title":"Values and computations","id":"values-and-computations"},{"title":"The scary side of values","id":"the-scary-side-of-values"},{"title":"Inputs to the graph","id":"inputs-to-the-graph"},{"title":"Bonsai is a compiler","id":"bonsai-is-a-compiler"}]}},{"type":"Page","content":[{"type":"Paragraph","content":[{"url":"/bonsai/guide/02-dynamism","isFile":false,"type":"Link","content":[{"text":"Chapter 2","type":"SimpleText"}]},{"text":" briefly touched on the fact that","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"computations capture internal state. This chapter takes a deeper look at","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"the primitives Bonsai provides for introducing and interacting with","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"local state.","type":"SimpleText"}]},{"id":"simple-state","title":"Simple State","type":"Section","content":[{"type":"Paragraph","content":[{"text":"The simplest kind of state is ","type":"SimpleText"},{"code":"Bonsai.state","type":"InlinedCode"},{"text":". It returns both a value","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"tracking the state's current model, and also a function for updating","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"that model.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"code":"ocaml skip val state : 'model -> ('model * ('model -> unit Effect.t)) Computation.t","type":"InlinedCode"}]},{"bulletMarker":"-","tight":true,"type":"BulletList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"code":"'model","type":"InlinedCode"},{"text":": This is the initial value contained in the state, its","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"\"default\" \"model\".","type":"SimpleText"}]}]}]},{"type":"Paragraph","content":[{"text":"Let's break down a simple, yet realistic usage of this computation.","type":"SimpleText"}]},{"lang":"ocaml","snippet":"let textbox : (string * Vdom.Node.t) Computation.t =\n  let%sub state, set_state = Bonsai.state \"\" in\n  let%arr state = state\n  and set_state = set_state in\n  let view =\n    Vdom.Node.input\n      ~attrs:\n        [ Vdom.Attr.value_prop state\n        ; Vdom.Attr.on_input (fun _ new_text -> set_state new_text)\n        ]\n      ()\n  in\n  state, view\n;;\n","lineNumber":"","type":"Snippet"},{"src":"/bonsai/bonsai-build/#textbox","fit":true,"light":{"background":"#e9edf2","color-scheme":"light","color":"#28487c"},"dark":{"background":"#101318","color-scheme":"dark","color":"#bac9e2"},"type":"Iframe"},{"type":"Paragraph","content":[{"text":"The computation returns the current contents of a textbox, as well as","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"the textbox view itself. The view could be combined with the views from","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"other components, eventually becoming the view for the entire","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"application. The \"current value\" could be passed on to other components","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"(like we'll do later).","type":"SimpleText"}]},{"attentionType":"note","content":[{"type":"Paragraph","content":[{"text":"In the Bonsai ecosystem, a function that takes any number of ","type":"SimpleText"},{"code":"Value.t","type":"InlinedCode"},{"type":"SoftLineBreak"},{"text":"as input and returns a ","type":"SimpleText"},{"code":"Computation.t","type":"InlinedCode"},{"text":" is considered a \"component\". (In","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"this example, \"textbox\" takes no ","type":"SimpleText"},{"code":"Value.t","type":"InlinedCode"},{"text":" as inputs, but zero is still","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"\"any number\", so ","type":"SimpleText"},{"code":"textbox","type":"InlinedCode"},{"text":" is a component.)","type":"SimpleText"}]}],"type":"AttentionBlock"},{"type":"Paragraph","content":[{"code":"ocaml skip let%sub state, set_state = Bonsai.state \"\" in","type":"InlinedCode"}]},{"type":"Paragraph","content":[{"text":"This line creates some string state initially containing the empty","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"string. We use ","type":"SimpleText"},{"code":"let%sub","type":"InlinedCode"},{"text":" to instantiate this state, giving us access to","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"state","type":"InlinedCode"},{"text":" and ","type":"SimpleText"},{"code":"set_state","type":"InlinedCode"},{"text":", which have types ","type":"SimpleText"},{"code":"string Value.t","type":"InlinedCode"},{"text":" and","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"(string -> unit Effect.t) Value.t","type":"InlinedCode"},{"text":", respectively.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"The ","type":"SimpleText"},{"code":"let%arr","type":"InlinedCode"},{"text":" expression maps over two values to produce a computation","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"containing the string and the view. If we attempted to write this code","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"using ","type":"SimpleText"},{"code":"state","type":"InlinedCode"},{"text":" and ","type":"SimpleText"},{"code":"set_state","type":"InlinedCode"},{"text":" directly instead of through ","type":"SimpleText"},{"code":"let%arr","type":"InlinedCode"},{"text":", the","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"resulting program would not type-check, since both of these variables","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"have ","type":"SimpleText"},{"code":"Value.t","type":"InlinedCode"},{"text":" types. ","type":"SimpleText"},{"code":"let%arr","type":"InlinedCode"},{"text":" is required in order to get access to","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"the data inside the values.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"The actual construction of the textbox virtual-dom node is quite boring;","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"we add the ","type":"SimpleText"},{"code":"value_prop","type":"InlinedCode"},{"text":" property to keep the textbox contents in sync,","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"and also register an event handler for ","type":"SimpleText"},{"code":"on_input","type":"InlinedCode"},{"text":", an event that fires","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"when the text in the textbox changes.","type":"SimpleText"}]},{"attentionType":"note","content":[{"type":"Paragraph","content":[{"text":"It is not obvious why ","type":"SimpleText"},{"code":"value_prop","type":"InlinedCode"},{"text":" is needed. If the contents of the","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"textbox are populated by the user, why re-set them with the current","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"state's value?","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"The answer is complicated, but it boils down to the behavior of the","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"component in weirder circumstances than these basic examples, like","type":"SimpleText"}]},{"delimiter":".","startNumber":1,"type":"OrderedList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"The ","type":"SimpleText"},{"code":"set_state","type":"InlinedCode"},{"text":" function is called by something ","type":"SimpleText"},{"type":"Emphasis","content":[{"text":"other","type":"SimpleText"}]},{"text":" than the","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"textbox ","type":"SimpleText"},{"code":"on_input","type":"InlinedCode"},{"text":" function. In this scenario, you'd want the","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"contents of the textbox to change alongside the ","type":"SimpleText"},{"code":"state","type":"InlinedCode"},{"text":".","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"The textbox component is removed from the page and then added back","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"again. If ","type":"SimpleText"},{"code":"value_prop","type":"InlinedCode"},{"text":" wasn't there, the textbox's default state","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"would be empty!","type":"SimpleText"}]}]}]}],"type":"AttentionBlock"},{"type":"Paragraph","content":[{"text":"When the event does fire, the ","type":"SimpleText"},{"code":"set_state","type":"InlinedCode"},{"text":" function is called with the","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"new string. ","type":"SimpleText"},{"code":"set_state","type":"InlinedCode"},{"text":" has type ","type":"SimpleText"},{"code":"string -> unit Effect.t","type":"InlinedCode"},{"text":", which you","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"may recognize from the last section in the","type":"SimpleText"},{"type":"SoftLineBreak"},{"url":"/bonsai/guide/01-virtual_dom","isFile":false,"type":"Link","content":[{"text":"virtual-dom","type":"SimpleText"}]},{"text":" chapter. This function is called with","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"the new textbox contents, and the event which is returned schedules the","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"state-setting in the Bonsai event queue.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"This is the payoff for the unanswered questions in ","type":"SimpleText"},{"url":"/bonsai/guide/01-virtual_dom","isFile":false,"type":"Link","content":[{"text":"the virtual-dom","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Chapter","type":"SimpleText"}]},{"text":":","type":"SimpleText"}]},{"delimiter":".","startNumber":1,"type":"OrderedList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"type":"Emphasis","content":[{"text":"How do I get values of type ","type":"SimpleText"},{"code":"unit Effect.t","type":"InlinedCode"},{"text":" that aren't just","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"Ignore","type":"InlinedCode"},{"text":" and ","type":"SimpleText"},{"code":"Many","type":"InlinedCode"}]},{"text":": State-transition functions returned by","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"stateful Bonsai components will return ","type":"SimpleText"},{"code":"unit Effect.t","type":"InlinedCode"},{"text":"s.","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"type":"Emphasis","content":[{"text":"Why would I want to use the Bonsai event queue anyway","type":"SimpleText"}]},{"text":": More","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"complex stateful components (like ","type":"SimpleText"},{"code":"Bonsai.state_machine","type":"InlinedCode"},{"text":") can","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"witness the changes made to other stateful components, and the","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Bonsai event-queue guarantees that these updates occur in a","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"consistent order and that downstream components witness changes made","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"to upstream components.","type":"SimpleText"}]}]}]}]},{"id":"multiple-textboxes","title":"Multiple Textboxes","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Now that we've built a single textbox component, let's use it in a","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"bigger component:","type":"SimpleText"}]},{"lang":"ocaml","snippet":"let two_textboxes : Vdom.Node.t Computation.t =\n  let%sub textbox_a = textbox in\n  let%sub textbox_b = textbox in\n  let%arr contents_a, view_a = textbox_a\n  and contents_b, view_b = textbox_b in\n  let display = Vdom.Node.textf \"a: %s, b: %s\" contents_a contents_b in\n  Vdom.Node.div\n    ~attrs:[ Vdom.Attr.style (Css_gen.display `Inline_grid) ]\n    [ view_a; view_b; display ]\n;;\n","lineNumber":"","type":"Snippet"},{"src":"/bonsai/bonsai-build/#two_textboxes","fit":true,"light":{"background":"#e9edf2","color-scheme":"light","color":"#28487c"},"dark":{"background":"#101318","color-scheme":"dark","color":"#bac9e2"},"type":"Iframe"},{"type":"Paragraph","content":[{"text":"This code is structurally very similar to the textbox component from","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"earlier:","type":"SimpleText"}]},{"delimiter":".","startNumber":1,"type":"OrderedList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"It instantiates computations using ","type":"SimpleText"},{"code":"let%sub","type":"InlinedCode"},{"text":" (this time with the","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"textbox","type":"InlinedCode"},{"text":" component itself, rather than the primitive ","type":"SimpleText"},{"code":"Bonsai.state","type":"InlinedCode"},{"type":"SoftLineBreak"},{"text":"computation).","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"code":"let%arr","type":"InlinedCode"},{"text":" is used to build a computation by mapping over values","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"previously bound by ","type":"SimpleText"},{"code":"let%sub","type":"InlinedCode"},{"text":".","type":"SimpleText"}]}]}]},{"type":"Paragraph","content":[{"text":"Of particular note is that the ","type":"SimpleText"},{"code":"textbox","type":"InlinedCode"},{"text":" component is instantiated twice","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"(using ","type":"SimpleText"},{"code":"let%sub","type":"InlinedCode"},{"text":"). Because of this, each textbox will have its own","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"independent state.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Just for kicks, it's easy to see what would happen if the computation is","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"evaluated once but used twice. In the following code, the only","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"difference between it and the previous example is this line:","type":"SimpleText"}]},{"lang":"diff","snippet":"- let%sub textbox_b = textbox in\n+ let textbox_b = textbox_a in\n","lineNumber":"","type":"Snippet"},{"lang":"ocaml","snippet":"let two_textboxes_shared_state : Vdom.Node.t Computation.t =\n  let%sub textbox_a = textbox in\n  let textbox_b = textbox_a in\n  let%arr contents_a, view_a = textbox_a\n  and contents_b, view_b = textbox_b in\n  let display = Vdom.Node.textf \"a: %s, b: %s\" contents_a contents_b in\n  Vdom.Node.div\n    ~attrs:[ Vdom.Attr.style (Css_gen.display `Inline_grid) ]\n    [ view_a; view_b; display ]\n;;\n","lineNumber":"","type":"Snippet"},{"src":"/bonsai/bonsai-build/#two_textboxes_shared_state","fit":true,"light":{"background":"#e9edf2","color-scheme":"light","color":"#28487c"},"dark":{"background":"#101318","color-scheme":"dark","color":"#bac9e2"},"type":"Iframe"},{"type":"Paragraph","content":[{"text":"Not very useful, but heartwarming that something sensible happens at","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"all.","type":"SimpleText"}]}]},{"id":"state-machine","title":"State Machine","type":"Section","content":[{"type":"Paragraph","content":[{"text":"While ","type":"SimpleText"},{"code":"Bonsai.state","type":"InlinedCode"},{"text":" is quite useful, sometimes the state contained","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"within an application more closely resembles a state-machine with","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"well-defined transitions between states.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Consider a \"counter\" component that stores (and displays) an integer,","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"alongside buttons which increment and decrement that integer. This","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"component can easily be implemented using ","type":"SimpleText"},{"code":"Bonsai.state","type":"InlinedCode"},{"text":":","type":"SimpleText"}]},{"lang":"ocaml","snippet":"let state_based_counter : Vdom.Node.t Computation.t =\n  let%sub state, set_state = Bonsai.state 0 in\n  let%arr state = state\n  and set_state = set_state in\n  let decrement =\n    Vdom.Node.button\n      ~attrs:[ Vdom.Attr.on_click (fun _ -> set_state (state - 1)) ]\n      [ Vdom.Node.text \"-1\" ]\n  in\n  let increment =\n    Vdom.Node.button\n      ~attrs:[ Vdom.Attr.on_click (fun _ -> set_state (state + 1)) ]\n      [ Vdom.Node.text \"+1\" ]\n  in\n  Vdom.Node.div [ decrement; Vdom.Node.textf \"%d\" state; increment ]\n;;\n","lineNumber":"","type":"Snippet"},{"src":"/bonsai/bonsai-build/#state_based_counter","fit":true,"light":{"background":"#e9edf2","color-scheme":"light","color":"#28487c"},"dark":{"background":"#101318","color-scheme":"dark","color":"#bac9e2"},"type":"Iframe"},{"type":"Paragraph","content":[{"text":"But there's a tricky bug hidden in this implementation: if a user clicks","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"the button more than once within a span of 16-milliseconds, there's a","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"chance that both button clicks will set the same value! This is because","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"the \"current state\" value is closed over by the event handler, and this","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"value could be stale because the DOM (including event handlers) is only","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"updated once per frame (approx every 16ms).","type":"SimpleText"}]},{"attentionType":"note","content":[{"type":"Paragraph","content":[{"text":"It's easy to say \"clicking on a button that fast isn't particularly","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"likely\", and that may be true, but users are ","type":"SimpleText"},{"type":"Emphasis","content":[{"text":"very fast","type":"SimpleText"}]},{"text":" with their","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"keyboards, and using keyboard shortcuts to manipulate applications is","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"common. In addition, if the application has an exceptionally long frame,","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"then the user might accidentally click twice before the frame completes.","type":"SimpleText"}]}],"type":"AttentionBlock"},{"type":"Paragraph","content":[{"text":"Fortunately, ","type":"SimpleText"},{"code":"Bonsai.state_machine0","type":"InlinedCode"},{"text":" is here to help! It has this type:","type":"SimpleText"}]},{"lang":"ocaml","snippet":"val Bonsai.state_machine0\n  :  (module Action with type t = 'action)\n  -> default_model:'model\n  -> apply_action:\n       (inject:('action -> unit Effect.t)\n        -> schedule_event:(unit Effect.t -> unit)\n        -> 'model\n        -> 'action\n        -> 'model)\n  -> ('model * ('action -> unit Effect.t)) Computation.t\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"Compared to ","type":"SimpleText"},{"code":"Bonsai.state","type":"InlinedCode"},{"text":", there are several similarities:","type":"SimpleText"}]},{"delimiter":".","startNumber":1,"type":"OrderedList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"A \"Model\" first-class-module is passed in, alongside the initial","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"model value (","type":"SimpleText"},{"code":"default_model","type":"InlinedCode"},{"text":").","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"The return value is a ","type":"SimpleText"},{"code":"Computation.t","type":"InlinedCode"},{"text":" that provides the current","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"state alongside a function which schedules changes to the state.","type":"SimpleText"}]}]}]},{"type":"Paragraph","content":[{"text":"The main difference is the additional ","type":"SimpleText"},{"code":"Action","type":"InlinedCode"},{"text":" module, and","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"apply_action","type":"InlinedCode"},{"text":". The apply-action parameter is a function with a fairly","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"long signature, but can be simplified down to the last section:","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"'model -> 'action -> 'model","type":"InlinedCode"},{"text":". This encodes the notion of a","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"state-machine transition: \"given the current model and an action,","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"produce a new model.\"","type":"SimpleText"}]},{"attentionType":"note","content":[{"type":"Paragraph","content":[{"text":"The ","type":"SimpleText"},{"code":"inject","type":"InlinedCode"},{"text":" and ","type":"SimpleText"},{"code":"schedule_event","type":"InlinedCode"},{"text":" parameters are rarely used. They are","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"only useful when a state-transition needs to schedule ","type":"SimpleText"},{"type":"Emphasis","content":[{"text":"another","type":"SimpleText"}]},{"text":" state","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"transition, either for itself (by composing ","type":"SimpleText"},{"code":"inject","type":"InlinedCode"},{"text":" with","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"schedule_event","type":"InlinedCode"},{"text":") or for another state-machine (just calling","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"schedule_event","type":"InlinedCode"},{"text":").","type":"SimpleText"}]}],"type":"AttentionBlock"},{"type":"Paragraph","content":[{"text":"So how would we use ","type":"SimpleText"},{"code":"state_machine0","type":"InlinedCode"},{"text":" to fix the bug in the counter","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"application?","type":"SimpleText"}]},{"lang":"ocaml","snippet":"module Action = struct\n  type t =\n    | Increment\n    | Decrement\n  [@@deriving sexp_of]\nend\n\nlet counter_state_machine : Vdom.Node.t Computation.t =\n  let%sub state, inject =\n    Bonsai.state_machine0\n      ()\n      ~sexp_of_action:[%sexp_of: Action.t]\n      ~default_model:0\n      ~apply_action:(fun (_ : _ Bonsai.Apply_action_context.t) model action ->\n        match action with\n        | Increment -> model + 1\n        | Decrement -> model - 1)\n  in\n  let%arr state = state\n  and inject = inject in\n  let decrement =\n    Vdom.Node.button\n      ~attrs:[ Vdom.Attr.on_click (fun _ -> inject Decrement) ]\n      [ Vdom.Node.text \"-1\" ]\n  in\n  let increment =\n    Vdom.Node.button\n      ~attrs:[ Vdom.Attr.on_click (fun _ -> inject Increment) ]\n      [ Vdom.Node.text \"+1\" ]\n  in\n  Vdom.Node.div [ decrement; Vdom.Node.textf \"%d\" state; increment ]\n;;\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"First, an ","type":"SimpleText"},{"code":"Action","type":"InlinedCode"},{"text":" module is defined as a sum type that lists all the","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"operations that can be performed on the state-machine. This module is","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"passed in to the call to ","type":"SimpleText"},{"code":"state_machine0","type":"InlinedCode"},{"text":". Then, the ","type":"SimpleText"},{"code":"apply_action","type":"InlinedCode"},{"type":"SoftLineBreak"},{"text":"function is defined as a model-transformation function.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Using the computation returned by ","type":"SimpleText"},{"code":"state_machine0","type":"InlinedCode"},{"text":" also changes: instead","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"of a \"set-state\" function, we get a function that \"injects\" our","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"Action.t","type":"InlinedCode"},{"text":" into a ","type":"SimpleText"},{"code":"unit Effect.t","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Now, when a button is clicked multiple times in quick succession,","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"instead of calling ","type":"SimpleText"},{"code":"set_state","type":"InlinedCode"},{"text":" multiple times with the same value,","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Bonsai will call ","type":"SimpleText"},{"code":"inject","type":"InlinedCode"},{"text":" multiple times, and they'll be processed by","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"apply_action","type":"InlinedCode"},{"text":" in order, producing the correct result.","type":"SimpleText"}]},{"attentionType":"note","content":[{"type":"Paragraph","content":[{"code":"state_machine0","type":"InlinedCode"},{"text":" has a \"0\" at the end to indicate that it takes \"0\"","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"additional inputs. Compare the type signatures between ","type":"SimpleText"},{"code":"state_machine0","type":"InlinedCode"},{"type":"SoftLineBreak"},{"text":"and ","type":"SimpleText"},{"code":"state_machine1","type":"InlinedCode"},{"text":":","type":"SimpleText"}]},{"lang":"diff","snippet":"-val state_machine0\n+val state_machine1\n   :  (module Action with type t = 'action)\n   -> default_model:'model\n   -> apply_action:\n        (inject:('action -> unit Effect.t)\n         -> schedule_event:(unit Effect.t -> unit)\n+        -> 'input\n         -> 'model\n         -> 'action\n         -> 'model)\n+  -> 'input Value.t\n   -> ('model * ('action -> unit Effect.t)) Computation.t\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"The input is provided to the state-machine in ","type":"SimpleText"},{"code":"'input Value.t","type":"InlinedCode"},{"text":" form, but","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"is available inside the ","type":"SimpleText"},{"code":"apply_action","type":"InlinedCode"},{"text":" as a ","type":"SimpleText"},{"code":"'input","type":"InlinedCode"},{"text":". This allows the","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"state-transition function to depend on the results of other","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"computations.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"There is no ","type":"SimpleText"},{"code":"state_machine2","type":"InlinedCode"},{"text":", but implementing one would be trivial, by","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"tupling the input ","type":"SimpleText"},{"code":"Value.t","type":"InlinedCode"},{"text":", and destructuring the inputs inside","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"apply_action","type":"InlinedCode"},{"text":".","type":"SimpleText"}]}],"type":"AttentionBlock"}]},{"id":"why-should-functional-programmers-be-okay-with-stateful-components","title":"Why should functional programmers be okay with stateful components?","type":"Section","content":[{"type":"Paragraph","content":[{"text":"UI programming is inherently stateful. Even a UI element as simple as a","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"textbox needs to keep some state around to store the current contents of","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"the textbox.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Many of the tools that functional programmers use for dealing with state","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"almost exclusively involve moving that state out of their programs into","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"a database, or by pulling mutable state out into a small part of the","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"program. These strategies can keep the majority of programs relatively","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"pure and easy to test, but sadly, they don't scale well to UI components","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"for a few reasons:","type":"SimpleText"}]},{"delimiter":".","startNumber":1,"type":"OrderedList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"The stateful nature is something that is desirable to test!","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Bonsai needs to know when the state for a component changes so that","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"it can re-fire calculations of down-stream components.","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"If every component were provided a state-getter and state-setter,","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"this would make component composition more manual work for the","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"programmer; as applications get bigger and bigger, the root element","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"would need to manage potentially dozens or hundreds of states for","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"each transitive sub-component.","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Adding or removing state from a component would be a breaking change","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"for everyone using it.","type":"SimpleText"}]}]}]},{"type":"Paragraph","content":[{"text":"One way to look at UI components is that they are portals through which","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"an application interacts with the messy world. The job of a component is","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"to translate the unpredictable user actions into a well-understood piece","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"of data.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Although the fact that components are stateful might injure your","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"functional programming dogmatism, in fact, it is quite in line with","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"functional programming principles, which aim to isolate effects. The","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"most common way to isolate effects is by having a small kernel of","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"effectful code invoke the pure majority of the logic; in other words, we","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"isolate state by shifting it toward the root of the program. Bonsai","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"offers an alternative tool for isolation. With Bonsai UI components,","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"effectful code gets wrapped up and managed so that the interface","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"provided by the component remains pure; in other words, we isolate state","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"by shifting it toward the leaves of the program.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"On to ","type":"SimpleText"},{"url":"/bonsai/guide/04-forms","isFile":false,"type":"Link","content":[{"text":"Chapter 4: Forms","type":"SimpleText"}]},{"text":".","type":"SimpleText"}]}]}],"lastModifiedTime":1695814630488,"tocItem":{"chapterTitle":"Guide","pageTitle":"State","pageMeta":{"title":["State"]},"dirName":"guide","fileName":"03-state","viewOnRelativePath":null,"pageSectionIdTitles":[{"title":"Simple State","id":"simple-state"},{"title":"Multiple Textboxes","id":"multiple-textboxes"},{"title":"State Machine","id":"state-machine"},{"title":"Why should functional programmers be okay with stateful components?","id":"why-should-functional-programmers-be-okay-with-stateful-components"}]}},{"type":"Page","content":[{"type":"Paragraph","content":[{"text":"Back in the ","type":"SimpleText"},{"url":"/bonsai/guide/03-state","isFile":false,"type":"Link","content":[{"text":"state chapter","type":"SimpleText"}]},{"text":", a textbox component was","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"built out of the low-level Bonsai primitives. Textboxes are an example","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"of form elements, and they're very common in real-world applications.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Because of this, Bonsai has an entire library dedicated to building and","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"combining forms.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"The library is called ","type":"SimpleText"},{"code":"bonsai_web_ui_form","type":"InlinedCode"},{"text":", and it is built on top of","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"the same primitives that were used in the previous chapter.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"For the rest of this doc, this module alias will be in effect:","type":"SimpleText"}]},{"lang":"ocaml","snippet":"module Form = Bonsai_web_ui_form\n","lineNumber":"","type":"Snippet"},{"id":"form-t","title":"Form.t","type":"Section","content":[{"type":"Paragraph","content":[{"text":"The primary type in the forms library is ","type":"SimpleText"},{"code":"'a Form.t","type":"InlinedCode"},{"text":". A value of type","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"'a Form.t","type":"InlinedCode"},{"text":" represents the state of a form at one particular instant in","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"time, where the form in question can edit values of type ","type":"SimpleText"},{"code":"'a","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Because of the inherently stateful nature of form UIs, it is common to","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"find ","type":"SimpleText"},{"code":"'a Form.t","type":"InlinedCode"},{"text":" inside of ","type":"SimpleText"},{"code":"Computation.t","type":"InlinedCode"},{"text":". For example, a textbox form","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"element that produces strings has this type:","type":"SimpleText"}]},{"lang":"ocaml","snippet":"val Form.Elements.Textbox.string\n  :  Source_code_position.t\n  -> string Form.t Computation.t\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"And the type for a checkbox that produces bools has this type:","type":"SimpleText"}]},{"lang":"ocaml","snippet":"val Form.Elements.Checkbox.bool\n  :  Source_code_position.t\n  -> default:bool\n  -> bool Form.t Computation.t\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"There are three primary operations that can be performed on a","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"'a Form.t","type":"InlinedCode"}]},{"delimiter":".","startNumber":1,"type":"OrderedList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Extract the current value:","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"val Form.value: 'a Form.t -> 'a Or_error.t","type":"InlinedCode"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Compute the view: ","type":"SimpleText"},{"code":"val Form.view_as_vdom: 'a Form.t -> Vdom.Node.t","type":"InlinedCode"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Set the value of the form:","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"val Form.set: 'a Form.t -> 'a -> unit Vdom.Effect.t","type":"InlinedCode"}]}]}]},{"attentionType":"note","content":[{"type":"Paragraph","content":[{"text":"The ","type":"SimpleText"},{"code":"view_as_vdom","type":"InlinedCode"},{"text":" function actually has an optional parameter, which","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"we'll investigate soon.","type":"SimpleText"}]}],"type":"AttentionBlock"},{"type":"Paragraph","content":[{"text":"Let's look at them all in action, using the textbox component up above","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"as an example:","type":"SimpleText"}]},{"id":"form-t-form-value","level":2,"title":"Form.value","type":"SubHeading"},{"type":"Paragraph","content":[{"text":"The \"value\" of a ","type":"SimpleText"},{"code":"'a Form.t","type":"InlinedCode"},{"text":" is the current output of the form as filled","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"in by the user. For a simple textbox, that value would be ","type":"SimpleText"},{"code":"string","type":"InlinedCode"},{"text":", but","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"most forms are compositions of subforms, so the produced value can be a","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"record or variant.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"In the following example, the value of a textbox is extracted and","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"printed as a sexp:","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"<!-- $MDX file=../../examples/bonsai_guide_code/form_examples.ml,part=form_textbox_value -->","type":"InlinedCode"},{"text":"{=html}","type":"SimpleText"}]},{"lang":"ocaml","snippet":"let textbox_value =\n  let%sub textbox = Form.Elements.Textbox.string () in\n  let%arr textbox = textbox >>| Form.label \"my textbox\" in\n  let value = Form.value textbox in\n  Vdom.Node.div\n    [ Form.view_as_vdom textbox\n    ; Vdom.Node.sexp_for_debugging ([%sexp_of: string Or_error.t] value)\n    ]\n;;\n","lineNumber":"","type":"Snippet"},{"src":"/bonsai/bonsai-build/#form_textbox_value","fit":true,"light":{"background":"#e9edf2","color-scheme":"light","color":"#28487c"},"dark":{"background":"#101318","color-scheme":"dark","color":"#bac9e2"},"type":"Iframe"},{"type":"Paragraph","content":[{"text":"Forms returning their values inside of an ","type":"SimpleText"},{"code":"Or_error.t","type":"InlinedCode"},{"text":" may be surprising","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"at first, but in practice, more complex forms are fallible, either","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"because form validation for an element has failed, or because a large","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"form is only partially filled out. By making the assumption that ","type":"SimpleText"},{"type":"Emphasis","content":[{"text":"all","type":"SimpleText"}]},{"type":"SoftLineBreak"},{"text":"forms are fallible, the rest of the API is simpler.","type":"SimpleText"}]},{"id":"form-t-form-view_as_vdom","level":2,"title":"Form.view_as_vdom","type":"SubHeading"},{"type":"Paragraph","content":[{"text":"This one is pretty simple, ","type":"SimpleText"},{"code":"view_as_vdom","type":"InlinedCode"},{"text":" renders the form into a","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"Vdom.Node.t","type":"InlinedCode"},{"text":". However, it also has an optional parameter that makes","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"submitting the form easier. Its full type signature is:","type":"SimpleText"}]},{"lang":"ocaml","snippet":"module Submit : sig\n  type 'a t\n\n  val create\n    :  ?handle_enter:bool\n    -> ?button:string option\n    -> f:('a -> unit Ui_effect.t)\n    -> unit\n    -> 'a t\nend\n\nval view_as_vdom : ?on_submit:'a Submit.t -> 'a t -> Vdom.Node.t\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"Because forms are frequently paired with a \"submit\" button, the optional","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"submission options provide an easy way to submit the form, with the ","type":"SimpleText"},{"code":"f","type":"InlinedCode"},{"type":"SoftLineBreak"},{"text":"field being called with the value of the fully-validated form. The two","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"options for submitting the form are","type":"SimpleText"}]},{"delimiter":".","startNumber":1,"type":"OrderedList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"code":"handle_enter","type":"InlinedCode"},{"text":", when ","type":"SimpleText"},{"code":"true","type":"InlinedCode"},{"text":" will cause the form to be submitted","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"whenever the ","type":"SimpleText"},{"code":"<enter>","type":"InlinedCode"},{"text":" key is pressed while focusing on a form","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"element inside this form.","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"code":"button","type":"InlinedCode"},{"text":", if ","type":"SimpleText"},{"code":"Some","type":"InlinedCode"},{"text":", a button with the provided text will be added","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"to the form. This button will be disabled whenever the form is in an","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"error state, but when the form is valid, the button will be enabled","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"and will trigger the submission function when pressed.","type":"SimpleText"}]}]}]},{"lang":"ocaml","snippet":"let textbox_on_submit =\n  let%sub textbox = Form.Elements.Textbox.string () in\n  let%arr textbox = textbox in\n  textbox\n  |> Form.label \"text to alert\"\n  |> Form.view_as_vdom ~on_submit:(Form.Submit.create () ~f:alert)\n;;\n","lineNumber":"","type":"Snippet"},{"src":"/bonsai/bonsai-build/#form_textbox_on_submit","fit":true,"light":{"background":"#e9edf2","color-scheme":"light","color":"#28487c"},"dark":{"background":"#101318","color-scheme":"dark","color":"#bac9e2"},"type":"Iframe"},{"id":"form-t-form-set","level":2,"title":"Form.set","type":"SubHeading"},{"type":"Paragraph","content":[{"text":"Setting the contents of a form is a rarer requirement. Most forms are","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"read-only (the user is the only one filling it out), but sometimes, a","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"form should be modified by the program, perhaps to initialize the form","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"in a specific state.","type":"SimpleText"}]},{"lang":"ocaml","snippet":"let form_set =\n  let%sub textbox = Form.Elements.Textbox.string () in\n  let%arr textbox = textbox >>| Form.label \"my textbox\" in\n  Vdom.Node.div\n    [ Form.view_as_vdom textbox\n    ; Vdom.Node.button\n        ~attrs:[ Vdom.Attr.on_click (fun _ -> Form.set textbox \"hello world\") ]\n        [ Vdom.Node.text \"click me\" ]\n    ]\n;;\n","lineNumber":"","type":"Snippet"},{"src":"/bonsai/bonsai-build/#form_set","fit":true,"light":{"background":"#e9edf2","color-scheme":"light","color":"#28487c"},"dark":{"background":"#101318","color-scheme":"dark","color":"#bac9e2"},"type":"Iframe"}]},{"id":"combinators","title":"Combinators","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Most forms contain many input elements, and Bonsai-Forms comes with a","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"set of combinators for combining many smaller subforms into a larger","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"form.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"For this example, we'll build a form for the following type:","type":"SimpleText"}]},{"lang":"ocaml","snippet":"type t =\n  { some_string : string\n  ; an_int : int\n  ; on_or_off : bool\n  }\n[@@deriving typed_fields, sexp_of]\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"Building a form that produces values of this type requires the use of","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"the ","type":"SimpleText"},{"code":"typed_fields","type":"InlinedCode"},{"text":" ppx, which you'll need to add to your jbuild.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Deriving ","type":"SimpleText"},{"code":"typed_fields","type":"InlinedCode"},{"text":" will make a module named ","type":"SimpleText"},{"code":"Typed_field","type":"InlinedCode"},{"type":"SoftLineBreak"},{"text":"containing a type with a constructor representing each field in the","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"record it was derived on.","type":"SimpleText"}]},{"lang":"ocaml","snippet":"let form_of_t : t Form.t Computation.t =\n  Form.Typed.Record.make\n    (module struct\n      (* reimport the module that typed_fields just derived *)\n      module Typed_field = Typed_field\n\n      let label_for_field = `Inferred\n\n      (* provide a form computation for each field in the record *)\n      let form_for_field : type a. a Typed_field.t -> a Form.t Computation.t = function\n        | Some_string -> Form.Elements.Textbox.string ()\n        | An_int -> Form.Elements.Number.int ~default:0 ~step:1 ()\n        | On_or_off -> Form.Elements.Checkbox.bool ~default:false ()\n      ;;\n    end)\n;;\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"We can also do the same for variants with ","type":"SimpleText"},{"code":"[@@deriving typed_variants]","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"lang":"ocaml","snippet":"type v =\n  | A\n  | B of int\n  | C of string\n[@@deriving typed_variants, sexp_of]\n\nlet form_of_v : v Form.t Computation.t =\n  Form.Typed.Variant.make\n    (module struct\n      (* reimport the module that typed_fields just derived *)\n      module Typed_variant = Typed_variant_of_v\n\n      let label_for_variant = `Inferred\n      let initial_choice = `First_constructor\n\n      (* provide a form computation for constructor in the variant *)\n      let form_for_variant : type a. a Typed_variant.t -> a Form.t Computation.t\n        = function\n          | A -> Bonsai.const (Form.return ())\n          | B -> Form.Elements.Textbox.int ()\n          | C -> Form.Elements.Textbox.string ()\n      ;;\n    end)\n;;\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"Finally, using this new form and printing the results:","type":"SimpleText"}]},{"lang":"ocaml","snippet":"let view_for_form : Vdom.Node.t Computation.t =\n  let%sub form_t = form_of_t in\n  let%sub form_v = form_of_v in\n  let%arr form_t = form_t\n  and form_v = form_v in\n  let form = Form.both form_t form_v in\n  let value = Form.value form in\n  Vdom.Node.div\n    [ Form.view_as_vdom form\n    ; Vdom.Node.sexp_for_debugging ([%sexp_of: (t * v) Or_error.t] value)\n    ]\n;;\n","lineNumber":"","type":"Snippet"},{"src":"/bonsai/bonsai-build/#record_form_view","fit":true,"light":{"background":"#e9edf2","color-scheme":"light","color":"#28487c"},"dark":{"background":"#101318","color-scheme":"dark","color":"#bac9e2"},"type":"Iframe"}]},{"id":"validation-parsing","title":"Validation Parsing","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Notably missing in the Forms API is a \"map\" function. In its place is","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"Form.project","type":"InlinedCode"},{"text":", which has this type signature:","type":"SimpleText"}]},{"lang":"ocaml","snippet":"val project\n  :  'a t\n  -> parse_exn:('a -> 'b)\n  -> unparse:('b -> 'a)\n  -> 'b t\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"code":"project","type":"InlinedCode"},{"text":" is a way to move from a form producing values of type ","type":"SimpleText"},{"code":"'a","type":"InlinedCode"},{"text":" to","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"a form producing values of type ","type":"SimpleText"},{"code":"'b","type":"InlinedCode"},{"text":", but it requires two \"mapping\"","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"functions, ","type":"SimpleText"},{"code":"parse_exn","type":"InlinedCode"},{"text":", which moves from ","type":"SimpleText"},{"code":"'a","type":"InlinedCode"},{"text":" to ","type":"SimpleText"},{"code":"'b","type":"InlinedCode"},{"text":" as you'd expect,","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"but the other, ","type":"SimpleText"},{"code":"unparse","type":"InlinedCode"},{"text":", goes in the opposite direction!","type":"SimpleText"}]},{"type":"Paragraph","content":[{"code":"unparse","type":"InlinedCode"},{"text":" is required because ","type":"SimpleText"},{"code":"Form.set","type":"InlinedCode"},{"text":" needs to be able to accept","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"values of type ","type":"SimpleText"},{"code":"'b","type":"InlinedCode"},{"text":" and route them through the setter for the input","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"form.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"In practice, ","type":"SimpleText"},{"code":"project","type":"InlinedCode"},{"text":" is used to build forms for types that can be","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"parsed from other types. For example, if ","type":"SimpleText"},{"code":"Form.Elements.Textbox.int","type":"InlinedCode"},{"type":"SoftLineBreak"},{"text":"didn't exist, we could implement it like so:","type":"SimpleText"}]},{"lang":"ocaml","snippet":"let int_textbox : int Form.t Computation.t =\n  let%sub form = Form.Elements.Textbox.string () in\n  let%arr form = form in\n  Form.project form ~parse_exn:Int.of_string ~unparse:Int.to_string\n;;\n","lineNumber":"","type":"Snippet"},{"src":"/bonsai/bonsai-build/#int_textbox","fit":true,"light":{"background":"#e9edf2","color-scheme":"light","color":"#28487c"},"dark":{"background":"#101318","color-scheme":"dark","color":"#bac9e2"},"type":"Iframe"},{"type":"Paragraph","content":[{"text":"You'll notice that non-integers are reported as an error. ","type":"SimpleText"},{"code":"Form.project","type":"InlinedCode"},{"type":"SoftLineBreak"},{"text":"actually captures the exception thrown by ","type":"SimpleText"},{"code":"Int.of_string","type":"InlinedCode"},{"text":" and the","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"Form.value","type":"InlinedCode"},{"text":" returned by the ","type":"SimpleText"},{"code":"project","type":"InlinedCode"},{"text":"ed form is an ","type":"SimpleText"},{"code":"Error","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"On to ","type":"SimpleText"},{"url":"/bonsai/guide/05-effect","isFile":false,"type":"Link","content":[{"text":"Chapter 5: Effect","type":"SimpleText"}]}]}]}],"lastModifiedTime":1695814644019,"tocItem":{"chapterTitle":"Guide","pageTitle":"Forms","pageMeta":{"title":["Forms"]},"dirName":"guide","fileName":"04-forms","viewOnRelativePath":null,"pageSectionIdTitles":[{"title":"Form.t","id":"form-t"},{"title":"Combinators","id":"combinators"},{"title":"Validation Parsing","id":"validation-parsing"}]}},{"type":"Page","content":[{"type":"Paragraph","content":[{"text":"As we saw back in the ","type":"SimpleText"},{"url":"/bonsai/guide/03-state","isFile":false,"type":"Link","content":[{"text":"chapter about state","type":"SimpleText"}]},{"text":", values with","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"type ","type":"SimpleText"},{"code":"unit Vdom.Effect.t","type":"InlinedCode"},{"text":" are used to schedule updates to stateful","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"components. However, the ","type":"SimpleText"},{"code":"Effect.t","type":"InlinedCode"},{"text":" type can also be used to perform","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"arbitrary side-effectful actions that return values. Most commonly,","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"these side effects involve calling RPCs.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"A ","type":"SimpleText"},{"code":"'a Effect.t","type":"InlinedCode"},{"text":" represents a side effect which, when performed, produces","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"a value of type ","type":"SimpleText"},{"code":"'a","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"There's a lot of overlap between ","type":"SimpleText"},{"code":"'a Effect.t","type":"InlinedCode"},{"text":" and ","type":"SimpleText"},{"code":"'a Deferred.t","type":"InlinedCode"},{"text":":","type":"SimpleText"}]},{"delimiter":".","startNumber":1,"type":"OrderedList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Both are (likely) performing side effects (like calling RPCs)","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"They produce values of type ","type":"SimpleText"},{"code":"'a","type":"InlinedCode"},{"text":" when completed","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"This result can be computed at some point in the future","type":"SimpleText"}]}]}]},{"type":"Paragraph","content":[{"text":"So it's important to note one major difference between ","type":"SimpleText"},{"code":"'a Effect.t","type":"InlinedCode"},{"text":" and","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"'a Deferred.t","type":"InlinedCode"},{"text":": when bound (via ","type":"SimpleText"},{"code":"let%bind","type":"InlinedCode"},{"text":") multiple times, a","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"Deferred","type":"InlinedCode"},{"text":" will execute its side effect exactly once, but an ","type":"SimpleText"},{"code":"Effect","type":"InlinedCode"},{"type":"SoftLineBreak"},{"text":"will side effect as many times as it is ","type":"SimpleText"},{"code":"bound","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"This difference exists for both theoretical and practical purposes.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"On the theoretical side, ","type":"SimpleText"},{"code":"Deferred.t","type":"InlinedCode"},{"text":", at its core, represents a value","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"that will be computed at some point in the future (and may perform side","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"effects in order to calculate that value), while ","type":"SimpleText"},{"code":"Effect.t","type":"InlinedCode"},{"text":" is a","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"first-class representation of the side effect itself, which happens to","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"produce a value.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"On the practical side, ","type":"SimpleText"},{"code":"Deferred.t","type":"InlinedCode"},{"text":" just doesn't mesh with the","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"incremental computational model that Bonsai provides. In particular, a","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"value of type ","type":"SimpleText"},{"code":"'a Deferred.t Value.t","type":"InlinedCode"},{"text":" is quite hard to use correctly, as","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Bonsai has no way of knowing that the value contained inside is a","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Deferred, and it won't re-compute when the deferred is completed.","type":"SimpleText"}]},{"lang":"{=html}","snippet":"<!--\nAlso, unit tests for Bonsai\\_web applications require compiling to JavaScript,\nand our JavaScript expect-test library is not capable of running Async tests,\nso `Effect.t` is used with synchronous functions to test apps that will use\nasyncronous functions in production.\n-->\n","lineNumber":"","type":"Snippet"},{"id":"making-an-effect","title":"Making an Effect","type":"Section","content":[{"type":"Paragraph","content":[{"text":"The main use-case for Effect is for exposing RPCs to the Bonsai","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"application, so for the rest of this document, we're going to be","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"interacting with a function that has this type signature, which we'll","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"pretend is an RPC:","type":"SimpleText"}]},{"lang":"ocaml","snippet":"val uppercase : string -> string Deferred.t\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"Turning ","type":"SimpleText"},{"code":"uppercase","type":"InlinedCode"},{"text":" into a function that returns an ","type":"SimpleText"},{"code":"Effect","type":"InlinedCode"},{"text":" is easy","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"with ","type":"SimpleText"},{"code":"Bonsai_web.Effect.of_deferred_fun","type":"InlinedCode"}]},{"lang":"ocaml","snippet":"val of_deferred_fun : ('query -> 'response Deferred.t) -> 'query -> 'response t\n","lineNumber":"","type":"Snippet"},{"attentionType":"note","content":[{"type":"Paragraph","content":[{"code":"of_deferred_fun","type":"InlinedCode"},{"text":" is defined inside ","type":"SimpleText"},{"code":"Bonsai_web","type":"InlinedCode"},{"text":" instead of just","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"Bonsai","type":"InlinedCode"},{"text":" because ","type":"SimpleText"},{"code":"Bonsai","type":"InlinedCode"},{"text":" doesn't depend on ","type":"SimpleText"},{"code":"Async","type":"InlinedCode"},{"text":". All the rest of the","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Effect functions are in ","type":"SimpleText"},{"code":"Bonsai.Effect","type":"InlinedCode"},{"text":" (but re-exported for","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"Bonsai_web.Effect","type":"InlinedCode"},{"text":").","type":"SimpleText"}]}],"type":"AttentionBlock"},{"type":"Paragraph","content":[{"text":"Using ","type":"SimpleText"},{"code":"Bonsai_web.of_deferred_fun","type":"InlinedCode"},{"text":", we can make a new function that","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"returns an ","type":"SimpleText"},{"code":"Effect.t","type":"InlinedCode"},{"text":" instead of ","type":"SimpleText"},{"code":"Deferred.t","type":"InlinedCode"}]},{"lang":"ocaml","snippet":"let uppercase_e : string -> string Effect.t = Bonsai_web.Effect.of_deferred_fun uppercase\n","lineNumber":"","type":"Snippet"}]},{"id":"using-effects","title":"Using Effects","type":"Section","content":[{"type":"Paragraph","content":[{"text":"By converting a deferred-returning function to return an effect, we can","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"more easily compose it with other Bonsai APIs, like event handlers.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"In the following example, we have a textbox, a button, and a \"results\"","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"display. We want to use the ","type":"SimpleText"},{"code":"uppercase_e","type":"InlinedCode"},{"text":" event-returning function from","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"above to compute the uppercased value of the contents of the textbox","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"when the button is clicked.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"The first implementation looks like this.","type":"SimpleText"}]},{"lang":"ocaml","snippet":"module Request_state = struct\n  type t =\n    | Empty\n    | Pending\n    | Filled of string\n  [@@deriving sexp, equal]\n\n  let to_string = function\n    | Empty -> \"<no request sent>\"\n    | Pending -> \"pending...\"\n    | Filled s -> s\n  ;;\nend\n\nlet uppercase_rpc_sender =\n  let%sub textbox = Forms.Elements.Textbox.string () in\n  let%sub result_state =\n    Bonsai.state\n      Empty\n      ~sexp_of_model:[%sexp_of: Request_state.t]\n      ~equal:[%equal: Request_state.t]\n  in\n  let%arr textbox = textbox\n  and result_state, set_result = result_state in\n  let on_submit (contents : string) : unit Effect.t =\n    let%bind.Effect s = uppercase_e contents in\n    set_result (Filled s)\n  in\n  let form_view =\n    textbox\n    |> Forms.label \"text to capitalize\"\n    |> Forms.view_as_vdom ~on_submit:(Forms.Submit.create ~f:on_submit ())\n  in\n  Vdom.Node.div\n    ~attrs:[ Vdom.Attr.style (Css_gen.display `Inline_grid) ]\n    [ form_view; Vdom.Node.text (Request_state.to_string result_state) ]\n;;\n","lineNumber":"","type":"Snippet"},{"src":"/bonsai/bonsai-build/#uppercase_rpc_sender","fit":true,"light":{"background":"#e9edf2","color-scheme":"light","color":"#28487c"},"dark":{"background":"#101318","color-scheme":"dark","color":"#bac9e2"},"type":"Iframe"},{"attentionType":"note","content":[{"type":"Paragraph","content":[{"text":"Please note that the \"Pending\" state is not used (yet!)","type":"SimpleText"}]}],"type":"AttentionBlock"},{"type":"Paragraph","content":[{"text":"Let's zoom in on the ","type":"SimpleText"},{"code":"on_submit","type":"InlinedCode"},{"text":" handler:","type":"SimpleText"}]},{"lang":"ocaml","snippet":"let on_submit (contents : string) : unit Effect.t =\n  let%bind.Effect s = uppercase_e contents in\n  set_result (Filled s)\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"By calling the ","type":"SimpleText"},{"code":"uppercase_e","type":"InlinedCode"},{"text":" function, a ","type":"SimpleText"},{"code":"string Effect.t","type":"InlinedCode"},{"text":" is returned.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Binding on that value gives us (at some point in the future) the result","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"of the operation, which we immediately pass through to update the state","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"of our component.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"But as mentioned above, the \"Pending\" state was never used. We can","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"implement that by adding another bind to the effect, setting \"Pending\"","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"immediately.","type":"SimpleText"}]},{"lang":"ocaml","snippet":"let on_submit (contents : string) : unit Vdom.Effect.t =\n  let open Bonsai.Effect.Let_syntax in\n  let%bind () = set_result Pending in\n  let%bind s = uppercase_e contents in\n  set_result (Filled s)\n","lineNumber":"","type":"Snippet"},{"src":"/bonsai/bonsai-build/#uppercase_rpc_sender_bind","fit":true,"light":{"background":"#e9edf2","color-scheme":"light","color":"#28487c"},"dark":{"background":"#101318","color-scheme":"dark","color":"#bac9e2"},"type":"Iframe"},{"type":"Paragraph","content":[{"text":"Next, read the ","type":"SimpleText"},{"url":"/bonsai/blogs/testing.mdx","isFile":true,"type":"Link","content":[{"text":"chapter on testing","type":"SimpleText"}]},{"text":".","type":"SimpleText"}]}]}],"lastModifiedTime":1695814654381,"tocItem":{"chapterTitle":"Guide","pageTitle":"Effect","pageMeta":{"title":["Effect"]},"dirName":"guide","fileName":"05-effect","viewOnRelativePath":null,"pageSectionIdTitles":[{"title":"Making an Effect","id":"making-an-effect"},{"title":"Using Effects","id":"using-effects"}]}},{"type":"Page","content":[{"type":"Paragraph","content":[{"text":"This chapter of the guide is a collection of smaller topics that are","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"valuable for structuring components.","type":"SimpleText"}]},{"id":"components-as-dags","title":"Components as DAGs","type":"Section","content":[{"type":"Paragraph","content":[{"text":"One of the biggest differences between Bonsai and other virtual-dom","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"based UI frameworks (such as React, Vue, or Elm) is that Bonsai","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"structures the composition of UI components as a Directed Acyclic Graph","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"instead of as a tree.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"What this means in practice is that the output of one component can be","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"fed as input to another component.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"To illustrate this, we'll build a textbox component whose placeholder","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"text is specified dynamically. This textbox component is so similar to","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"the one constructed in the ","type":"SimpleText"},{"url":"/bonsai/guide/03-state","isFile":false,"type":"Link","content":[{"text":"state chapter","type":"SimpleText"}]},{"text":" that the diff","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"between that version and the new one is shown below for convenience.","type":"SimpleText"}]},{"lang":"diff","snippet":"-let textbox =\n+let textbox ~placeholder =\n   let%sub state, set_state = Bonsai.state (module String) ~default_model:\"\" in\n   (let%arr state = state\n      and set_state = set_state\n+     and placeholder = placeholder in\n      let view =\n        Vdom.Node.input\n          ~attr:(Vdom.Attr.many [ Vdom.Attr.value_prop state\n          ; Vdom.Attr.on_input (fun _ new_text -> set_state new_text)\n+         ; Vdom.Attr.placeholder placeholder\n          ])\n          ()\n      in\n      state, view)\n;;\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"And a basic usage of the new component (with a constant placeholder)","type":"SimpleText"}]},{"lang":"ocaml","snippet":"let textbox_with_placeholder = textbox ~placeholder:(Value.return \"the placeholder\")\n","lineNumber":"","type":"Snippet"},{"src":"/bonsai/bonsai-build/#textbox_with_placeholder","fit":true,"light":{"background":"#e9edf2","color-scheme":"light","color":"#28487c"},"dark":{"background":"#101318","color-scheme":"dark","color":"#bac9e2"},"type":"Iframe"},{"type":"Paragraph","content":[{"text":"And because of the graph-like structure of a Bonsai app, we can","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"trivially chain two textboxes together so that the contents of one of","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"the output of one textbox is used as the placeholder for the next.","type":"SimpleText"}]},{"lang":"ocaml","snippet":"let textbox_chaining =\n  let%sub a_contents, a_view = textbox ~placeholder:(Value.return \"\") in\n  let%sub _, b_view = textbox ~placeholder:a_contents in\n  let%arr a_view = a_view\n  and b_view = b_view in\n  let style = Vdom.Attr.style (Css_gen.display `Inline_grid) in\n  Vdom.Node.div ~attrs:[ style ] [ a_view; b_view ]\n;;\n","lineNumber":"","type":"Snippet"},{"src":"/bonsai/bonsai-build/#textbox_chaining","fit":true,"light":{"background":"#e9edf2","color-scheme":"light","color":"#28487c"},"dark":{"background":"#101318","color-scheme":"dark","color":"#bac9e2"},"type":"Iframe"},{"type":"Paragraph","content":[{"text":"Clearly, chaining together two textboxes to set the placeholder text","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"isn't particularly useful (the examples are small though!), but in real","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"applications, this kind of component dependency structuring is valuable","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"in a myriad of ways:","type":"SimpleText"}]},{"bulletMarker":"-","tight":true,"type":"BulletList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"The output of a \"tab-selector\" component could include the view for","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"a tab-bar, but also a value for the currently selected tab. Then","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"other components could read that value and respond accordingly.","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"A form could dynamically change its contents based on the values of","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"previously filled out form contents.","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"At the top of an application component graph, a \"light mode or dark","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"mode\" checkbox component could be added, and the current value","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"(either light or dark) could be passed down to downstream components","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"to influence the way that they display.","type":"SimpleText"}]}]}]}]},{"id":"matchsub","title":"match%sub","type":"Section","content":[{"type":"Paragraph","content":[{"code":"let%sub","type":"InlinedCode"},{"text":" should be familiar to you by now, but there's actually a more","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"powerful form of variable substitution which permits a limited form of","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"dynamism, match expressions! With ","type":"SimpleText"},{"code":"match%sub","type":"InlinedCode"},{"text":", a ","type":"SimpleText"},{"code":"'a Value.t","type":"InlinedCode"},{"text":" is matched","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"on, and any bindings in the match arm are projected out into their","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"Value.t","type":"InlinedCode"},{"text":" form. Let's look at what that means in practice!","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"In the following example, we'll avoid building the 2nd textbox if the","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"first textbox is either empty or only contains whitespace.","type":"SimpleText"}]},{"lang":"ocaml","snippet":"let textbox_matching =\n  let%sub a_contents, a_view = textbox ~placeholder:(Value.return \"\") in\n  let%sub a_contents =\n    let%arr s = a_contents in\n    let s = String.strip s in\n    if String.is_empty s then None else Some s\n  in\n  match%sub a_contents with\n  | None ->\n    let%arr a_view = a_view in\n    let message = Vdom.Node.div [ Vdom.Node.text \"<a is empty>\" ] in\n    Vdom.Node.div [ a_view; message ]\n  | Some placeholder ->\n    let%sub _, b_view = textbox ~placeholder in\n    let%arr a_view = a_view\n    and b_view = b_view in\n    let style = Vdom.Attr.style (Css_gen.display `Inline_grid) in\n    Vdom.Node.div ~attrs:[ style ] [ a_view; b_view ]\n;;\n","lineNumber":"","type":"Snippet"},{"src":"/bonsai/bonsai-build/#textbox_chaining_match","fit":true,"light":{"background":"#e9edf2","color-scheme":"light","color":"#28487c"},"dark":{"background":"#101318","color-scheme":"dark","color":"#bac9e2"},"type":"Iframe"},{"type":"Paragraph","content":[{"text":"There are a few details to note about some of the types up above","type":"SimpleText"}]},{"delimiter":".","startNumber":1,"type":"OrderedList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"The matched value has type ","type":"SimpleText"},{"code":"'a Value.t","type":"InlinedCode"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"The values produced by each of the match-arms must be of type","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"'b Computation.t","type":"InlinedCode"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"The overall type of the ","type":"SimpleText"},{"code":"match%sub","type":"InlinedCode"},{"text":" expression has type","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"'b Computation.t","type":"InlinedCode"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Any identifiers bound during matching (in the above example, this is","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"just ","type":"SimpleText"},{"code":"placeholder","type":"InlinedCode"},{"text":") are available in ","type":"SimpleText"},{"code":"Value.t","type":"InlinedCode"},{"text":" form.","type":"SimpleText"}]}]}]},{"type":"Paragraph","content":[{"text":"It is important to know that at any point in time, only one of the arms","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"in the pattern match is active, so the components in the not-matched","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"arms are not being computed.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"In addition to ","type":"SimpleText"},{"code":"match%sub","type":"InlinedCode"},{"text":", ","type":"SimpleText"},{"code":"if%sub","type":"InlinedCode"},{"text":" also exists, with the exact same","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"semantics, but specialized for booleans.","type":"SimpleText"}]}]},{"id":"bonsai-assoc","title":"Bonsai.assoc","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Up until now, Bonsai hasn't had any real tools for dealing with","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"dynamically sized collections of components. Sure, you could manually","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"re-use a text-box component twice, but if the number of distinct","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"components is determined at runtime, writing out a bunch of ","type":"SimpleText"},{"code":"let%sub","type":"InlinedCode"},{"type":"SoftLineBreak"},{"text":"won't cut it.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"That's where ","type":"SimpleText"},{"code":"Bonsai.assoc","type":"InlinedCode"},{"text":" comes in. Let's start by looking at its type","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"signature:","type":"SimpleText"}]},{"lang":"ocaml","snippet":"val assoc\n  :  ('key, 'cmp) comparator\n  -> ('key, 'data, 'cmp) Map.t Value.t\n  -> f:('key Value.t -> 'data Value.t -> 'result Computation.t)\n  -> ('key, 'result, 'cmp) Map.t Computation.t\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"Breaking the parts of the signature down one-by-one we have","type":"SimpleText"}]},{"delimiter":".","startNumber":1,"type":"OrderedList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"code":"('key, 'cmp) comparator","type":"InlinedCode"},{"text":": A comparator is required; this is","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"typically just ","type":"SimpleText"},{"code":"(module Int)","type":"InlinedCode"},{"text":" or ","type":"SimpleText"},{"code":"(module My_type)","type":"InlinedCode"},{"text":" where the type","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"is comparable, and has the sexp functions defined.","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"code":"('key, 'data, 'cmp) Map.t Value.t","type":"InlinedCode"},{"text":": A dynamic map from ","type":"SimpleText"},{"code":"'key","type":"InlinedCode"},{"text":" to","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"'data","type":"InlinedCode"},{"text":".","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"a named function ","type":"SimpleText"},{"code":"f","type":"InlinedCode"},{"text":" with type","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"'key Value.t -> 'data Value.t -> 'result    Computation.t","type":"InlinedCode"},{"text":"; this","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"function will be called with every key-value pair in the map, and","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"produces a computation containing ","type":"SimpleText"},{"code":"'result","type":"InlinedCode"},{"text":".","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Finally, the return value of ","type":"SimpleText"},{"code":"assoc","type":"InlinedCode"},{"text":" is","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"('key, 'result, 'cmp) Map.t    Computation.t","type":"InlinedCode"},{"text":", a map from the same","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"key as the input to the ","type":"SimpleText"},{"code":"'result","type":"InlinedCode"},{"text":" produced in the ","type":"SimpleText"},{"code":"f","type":"InlinedCode"},{"text":" function.","type":"SimpleText"}]}]}]},{"type":"Paragraph","content":[{"text":"This type signature is remarkably close to the regular OCaml function","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"Map.mapi","type":"InlinedCode"},{"text":", which has this type signature:","type":"SimpleText"}]},{"lang":"ocaml","snippet":"val mapi\n:  ('key, 'data, 'cmp) Map.t\n-> f:(key:'key -> data:'data -> 'result)\n-> ('key, 'result, 'cmp) Map.t\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"But of course the Bonsai version has a bunch of ","type":"SimpleText"},{"code":"Value.t","type":"InlinedCode"},{"text":" and","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"Computation.t","type":"InlinedCode"},{"text":" in it's type signature, so what are those types giving","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"us?","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"The first benefit to ","type":"SimpleText"},{"code":"assoc","type":"InlinedCode"},{"text":" is that the computation inside of ","type":"SimpleText"},{"code":"f","type":"InlinedCode"},{"text":" is","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"only evaluated once per key/value pair, after which any updates to the","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"data","type":"InlinedCode"},{"text":" travel through the regular bonsai ","type":"SimpleText"},{"code":"Value","type":"InlinedCode"},{"text":" graph optimization.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"This means that if the input map is 100,000 elements large, but only one","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"of the keys has data that is changing frequently, only the one component","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"for that key will be involved in recomputing the eventual result of the","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"overall function.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"The other benefit to using assoc is apparent from looking at the type of","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"the function: the ","type":"SimpleText"},{"code":"f","type":"InlinedCode"},{"text":" function returns a ","type":"SimpleText"},{"code":"Computation.t","type":"InlinedCode"},{"text":", which means","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"that every key/value pair in the output map is its own component, each","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"with it's own independent state!","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"For this example, we'll re-use the \"counter\" component defined in the","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"last section of the ","type":"SimpleText"},{"url":"/bonsai/guide/03-state","isFile":false,"type":"Link","content":[{"text":"state chapter","type":"SimpleText"}]},{"text":", but this time,","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"there'll be a bunch of them!","type":"SimpleText"}]},{"lang":"ocaml","snippet":"let multiple_counters (input : unit String.Map.t Value.t) =\n  let%sub counters =\n    Bonsai.assoc\n      (module String)\n      input\n      ~f:(fun _key (_ : unit Value.t) -> State_examples.counter_state_machine)\n  in\n  let%arr counters = counters in\n  Vdom.Node.table\n    (counters\n     |> Map.to_alist\n     |> List.map ~f:(fun (key, vdom) ->\n       let open Vdom.Node in\n       let name = td [ Vdom.Node.text key ] in\n       let counter = td [ vdom ] in\n       Vdom.Node.tr [ name; counter ]))\n;;\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"and to start out with we'll use a constant map as an input to the","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"component:","type":"SimpleText"}]},{"lang":"ocaml","snippet":"let multiple_counters_constant =\n  multiple_counters\n    ([ \"hello\", (); \"there\", () ] |> Map.of_alist_exn (module String) |> Value.return)\n;;\n","lineNumber":"","type":"Snippet"},{"src":"/bonsai/bonsai-build/#multiple_counters_constant","fit":true,"light":{"background":"#e9edf2","color-scheme":"light","color":"#28487c"},"dark":{"background":"#101318","color-scheme":"dark","color":"#bac9e2"},"type":"Iframe"},{"type":"Paragraph","content":[{"text":"and while this does show off how to associate a component across a map,","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"using ","type":"SimpleText"},{"code":"Value.return","type":"InlinedCode"},{"text":" makes it hard to see the \"dynamic\" aspect. So let's","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"build a dynamically editable map!","type":"SimpleText"}]},{"attentionType":"note","content":[{"type":"Paragraph","content":[{"text":"This final code example is less about ","type":"SimpleText"},{"code":"Bonsai.assoc","type":"InlinedCode"},{"text":" and more about","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"integrating concepts from the rest of the bonsai guide:","type":"SimpleText"}]},{"bulletMarker":"-","tight":true,"type":"BulletList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"code":"Bonsai.state_machine","type":"InlinedCode"},{"text":" tracks and edits a map for the counters","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Bonsai's Forms library is used to interact with the state-machine to","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"add new entries","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"code":"assoc","type":"InlinedCode"},{"text":" builds up the table of counters from the map inside","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"state-machine.","type":"SimpleText"}]}]}]}],"type":"AttentionBlock"},{"lang":"ocaml","snippet":"module Model = struct\n  type t = unit String.Map.t [@@deriving sexp, equal]\n\n  let default = String.Map.of_alist_exn [ \"Dave\", (); \"Jill\", () ]\nend\n\nmodule Action = struct\n  type t =\n    | Add of string\n    | Remove of string\n  [@@deriving sexp_of]\nend\n\nlet people =\n  Bonsai.state_machine0\n    ()\n    ~sexp_of_model:[%sexp_of: Model.t]\n    ~equal:[%equal: Model.t]\n    ~sexp_of_action:[%sexp_of: Action.t]\n    ~default_model:Model.default\n    ~apply_action:(fun (_ : _ Bonsai.Apply_action_context.t) model action ->\n      match action with\n      | Add name -> Map.set model ~key:name ~data:()\n      | Remove name -> Map.remove model name)\n;;\n\nlet add_new_person_form ~inject_add_person =\n  let%sub form = Form.Elements.Textbox.string () in\n  let%arr form = form\n  and inject_add_person = inject_add_person in\n  let on_submit name = Vdom.Effect.Many [ Form.set form \"\"; inject_add_person name ] in\n  form\n  |> Form.label \"name\"\n  |> Form.validate ~f:(fun name ->\n    if String.for_all name ~f:Char.is_whitespace\n    then Error (Error.of_string \"name must not be empty\")\n    else Ok ())\n  |> Form.view_as_vdom ~on_submit:(Form.Submit.create ~f:on_submit ())\n;;\n\nlet people_table people ~inject_remove_person =\n  Bonsai.assoc\n    (module String)\n    people\n    ~f:(fun name (_ : unit Value.t) ->\n      let%sub counter = State_examples.counter_state_machine in\n      let%arr counter = counter\n      and name = name\n      and inject_remove_person = inject_remove_person in\n      let open Vdom.Node in\n      let remove_person =\n        td\n          [ button\n              ~attrs:[ Vdom.Attr.on_click (fun _ -> inject_remove_person name) ]\n              [ text \"x\" ]\n          ]\n      in\n      let name = td [ text name ] in\n      let counter = td [ counter ] in\n      tr [ name; counter; remove_person ])\n;;\n\nlet kudo_tracker =\n  let%sub people, inject_action = people in\n  let%sub form =\n    let%sub inject_add_person =\n      let%arr inject_action = inject_action in\n      fun name -> inject_action (Add name)\n    in\n    add_new_person_form ~inject_add_person\n  in\n  let%sub people_table =\n    let%sub inject_remove_person =\n      let%arr inject_action = inject_action in\n      fun name -> inject_action (Remove name)\n    in\n    people_table people ~inject_remove_person\n  in\n  let%arr people_table = people_table\n  and form = form in\n  let open Vdom.Node in\n  div\n    [ h2 [ text \"kudos tracker\" ]\n    ; table\n        [ thead [ tr [ th [ text \"Name\" ]; th [ text \"# Kudos\" ]; th [ text \"Remove\" ] ] ]\n        ; tbody (Map.data people_table)\n        ]\n    ; h2 [ text \"Add Person\" ]\n    ; form\n    ]\n;;\n","lineNumber":"","type":"Snippet"},{"src":"/bonsai/bonsai-build/#kudo_tracker","fit":true,"light":{"background":"#e9edf2","color-scheme":"light","color":"#28487c"},"dark":{"background":"#101318","color-scheme":"dark","color":"#bac9e2"},"type":"Iframe"}]}],"lastModifiedTime":1695814665198,"tocItem":{"chapterTitle":"Guide","pageTitle":"Flow","pageMeta":{"title":["Flow"]},"dirName":"guide","fileName":"07-flow","viewOnRelativePath":null,"pageSectionIdTitles":[{"title":"Components as DAGs","id":"components-as-dags"},{"title":"match%sub","id":"matchsub"},{"title":"Bonsai.assoc","id":"bonsai-assoc"}]}},{"type":"Page","content":[{"type":"Paragraph","content":[{"text":"Styling an application is very important. Not only is it critical for","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"making an app ","type":"SimpleText"},{"type":"Emphasis","content":[{"text":"look","type":"SimpleText"}]},{"text":" good, but \"styling\" is also responsible for","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"component layout.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"However, there are a few different ways to include style information in","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"your app or library, each with their own tradeoffs:","type":"SimpleText"}]},{"delimiter":".","startNumber":1,"type":"OrderedList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Hand-written .css files","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"code":"style","type":"InlinedCode"},{"text":" properties in vdom nodes","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"code":"ppx_css","type":"InlinedCode"},{"text":" for inline stylesheets","type":"SimpleText"}]}]}]},{"id":"handwritten-css-files","title":"Handwritten .css Files","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Using .css files to style components and pages is very common in web","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"development. The Mozilla Developer Network has a very good ","type":"SimpleText"},{"url":"https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/CSS_basics","isFile":false,"type":"Link","content":[{"text":"introductory","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"tutorial","type":"SimpleText"}]},{"type":"SoftLineBreak"},{"text":"on CSS if you aren't already familiar with it. Google also has a","type":"SimpleText"},{"type":"SoftLineBreak"},{"url":"https://web.dev/learn/css/","isFile":false,"type":"Link","content":[{"text":"comprehensive tutorial","type":"SimpleText"}]},{"text":".","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"At its core, a css stylesheet is a language for pattern-matching on DOM","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"tree structure combined with a set of rules that should be applied to","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"matching elements.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"With this css: ","type":"SimpleText"},{"code":"<!-- $MDX skip -->","type":"InlinedCode"},{"text":"{=html}","type":"SimpleText"}]},{"lang":"css","snippet":"table {\n  border-collapse: collapse;\n}\n\ntable td {\n  padding: 4px;\n}\n\ntable thead {\n  text-align: center;\n  background: brown;\n  color: antiquewhite;\n  font-weight: bold;\n}\n\ntable tr {\n  background: antiquewhite;\n}\n\ntable tr:nth-child(even) {\n  background: wheat;\n}\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"And some basic table code, we get a pretty table!","type":"SimpleText"}]},{"lang":"ocaml","snippet":"type row =\n  { id : int\n  ; name : string\n  ; age : int\n  }\n\nlet basic_table rows =\n  let open Vdom.Node in\n  let thead = thead [ td [ text \"id\" ]; td [ text \"name\" ]; td [ text \"age\" ] ] in\n  let tbody =\n    rows\n    |> List.map ~f:(fun { id; name; age } ->\n      tr [ td [ textf \"%d\" id ]; td [ text name ]; td [ textf \"%d\" age ] ])\n    |> tbody\n  in\n  table [ thead; tbody ]\n;;\n\nlet politicians =\n  basic_table\n    [ { id = 0; name = \"George Washington\"; age = 67 }\n    ; { id = 1; name = \"Alexander Hamilton\"; age = 47 }\n    ; { id = 2; name = \"Abraham Lincoln\"; age = 56 }\n    ]\n;;\n","lineNumber":"","type":"Snippet"},{"src":"/bonsai/bonsai-build/#politician-table","fit":true,"light":{"background":"#e9edf2","color-scheme":"light","color":"#28487c"},"dark":{"background":"#101318","color-scheme":"dark","color":"#bac9e2"},"type":"Iframe"},{"type":"Paragraph","content":[{"text":"By keeping the styling logic and vdom-node production separate, our css","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"can be quite high-level. Sadly, the \"high level description\" of the","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"pattern for this table might be more broad than we had hoped; this css","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"will style ","type":"SimpleText"},{"type":"Emphasis","content":[{"text":"every","type":"SimpleText"}]},{"text":" table in our application, even those created by other","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"components that you might not own!","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"A common fix for this problem is to make the patterns more specific by","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"adding a unique class name targeting just the tables that we want. For","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"example:","type":"SimpleText"}]},{"lang":"diff","snippet":"- table {\n+ table.politicians {\n    border-collapse: collapse;\n  }\n\n- table td {\n+ table.politicians td {\n    padding: 4px;\n  }\n\n- table thead {\n+ table.politicians thead {\n    text-align: center;\n    background: brown;\n    color: antiquewhite;\n    font-weight: bold;\n  }\n\n- table tr {\n+ table.politicians tr {\n    background: antiquewhite;\n  }\n\n- table tr:nth-child(even) {\n+ table.politicians tr:nth-child(even) {\n    background: wheat;\n  }\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"and then in the table production code,","type":"SimpleText"}]},{"lang":"diff","snippet":"- table [ thead; tbody ]\n+ table ~attr:(Vdom.Attr.class_ \"politician\") [ thead; tbody ]\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"This solves the issue of our styles inadvertantly obliterating other","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"people's components, but comes at the cost of verbosity. It also isn't","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"completely foolproof: if two people pick the same identifier (in this","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"case we went with ","type":"SimpleText"},{"code":"politician","type":"InlinedCode"},{"text":"), then the clash would still occur. This","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"leads to people using very long and descriptive identifiers to reduce","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"the odds of a collision.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Another downside is that if you're an application author pulling in a UI","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"component which has a stylesheet, then you need to somehow get that css","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"file into your application. Typically this is done by writing a dune","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"rule that concatenates your application's stylesheet with the","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"stylesheets of any dependencies, like so:","type":"SimpleText"}]},{"lang":"lisp","snippet":"(rule (\n  (targets (style.css))\n  (deps    (%{root}/lib/dygraph/dist/dygraph.css ./my_styles.css))\n  (action \"cat %{deps} > %{target}\")))\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"If a component requires a stylesheet, there is no way of knowing that","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"fact (other than by reading the readmes, but who does that?).","type":"SimpleText"}]},{"type":"Paragraph","content":[{"type":"StrongEmphasis","content":[{"text":"Pros","type":"SimpleText"}]}]},{"delimiter":".","startNumber":1,"type":"OrderedList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Full access to CSS language including pseudoselectors (like","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":":nth-child(even)","type":"InlinedCode"},{"text":", or ","type":"SimpleText"},{"code":":hover","type":"InlinedCode"},{"text":")","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Good debugging support in Chrome Devtools","type":"SimpleText"}]}]}]},{"type":"Paragraph","content":[{"type":"StrongEmphasis","content":[{"text":"Cons","type":"SimpleText"}]}]},{"delimiter":".","startNumber":1,"type":"OrderedList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Identifier collisions can break things in subtle ways","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Reusable components that rely on a css stylesheet force the","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"application author to use css files and to build out the dune rule","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"for concatenating all of their dependencies' css.","type":"SimpleText"}]}]}]}]},{"id":"vdom-attr-style","title":"Vdom.Attr.style","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Another way to add styling to DOM nodes is through an individual DOM","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"node's ","type":"SimpleText"},{"code":"style","type":"InlinedCode"},{"text":" property. ","type":"SimpleText"},{"code":"Vdom.Attr.style","type":"InlinedCode"},{"text":" has this type signature:","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"Css_gen.t -> Vdom.Attr.t","type":"InlinedCode"},{"text":", so we'll be primarily looking at the","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"Css_gen","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"A ","type":"SimpleText"},{"code":"Css_gen.t","type":"InlinedCode"},{"text":" is a collection of key-value pairs of css properties and","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"their values. As an example,","type":"SimpleText"}]},{"lang":"ocaml","snippet":"let style: Css_gen.t = Css_gen.text_align `Center\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"is a style that only contains the kv-pair ","type":"SimpleText"},{"code":"text-align: center;","type":"InlinedCode"},{"text":".","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Meanwhile,","type":"SimpleText"}]},{"lang":"ocaml","snippet":"let style: Css_gen.t =\n  let open Css_gen in\n  text_align `Center @> background_color (`Name \"red\")\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"makes use of the ","type":"SimpleText"},{"code":"@>","type":"InlinedCode"},{"text":" operator in order to merge two ","type":"SimpleText"},{"code":"Css_gen.t","type":"InlinedCode"},{"text":"s,","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"producing kv-pairs which contain ","type":"SimpleText"},{"code":"text-align: center; background: red;","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"If we ported the table example to use the inline style attribute, our","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"code would now look like this:","type":"SimpleText"}]},{"lang":"ocaml","snippet":"type row2 =\n  { id : int\n  ; name : string\n  ; age : int\n  }\n\nlet table_styles =\n  let open Css_gen in\n  border_collapse `Collapse\n  @> border ~style:`Solid ~color:(`Name \"brown\") ~width:(`Px 1) ()\n;;\n\nlet thead_styles =\n  let open Css_gen in\n  text_align `Center\n  @> background_color (`Name \"brown\")\n  @> color (`Name \"antiquewhite\")\n  @> font_weight `Bold\n;;\n\nlet tr_odd = Css_gen.background_color (`Name \"antiquewhite\")\nlet tr_even = Css_gen.background_color (`Name \"wheat\")\n\nlet td_styles =\n  Css_gen.padding ~top:(`Px 4) ~bottom:(`Px 4) ~left:(`Px 4) ~right:(`Px 4) ()\n;;\n\nlet basic_table_attr rows =\n  let open Vdom.Node in\n  let thead =\n    thead\n      ~attrs:[ Vdom.Attr.style thead_styles ]\n      [ td [ text \"id\" ]; td [ text \"name\" ]; td [ text \"age\" ] ]\n  in\n  let tbody =\n    rows\n    |> List.mapi ~f:(fun i { id; name; age } ->\n      let tr_style = if Int.( % ) i 2 = 0 then tr_even else tr_odd in\n      tr\n        ~attrs:[ Vdom.Attr.style tr_style ]\n        [ td ~attrs:[ Vdom.Attr.style td_styles ] [ textf \"%d\" id ]\n        ; td ~attrs:[ Vdom.Attr.style td_styles ] [ text name ]\n        ; td ~attrs:[ Vdom.Attr.style td_styles ] [ textf \"%d\" age ]\n        ])\n    |> tbody\n  in\n  table ~attrs:[ Vdom.Attr.style table_styles ] [ thead; tbody ]\n;;\n\nlet politicians =\n  basic_table_attr\n    [ { id = 0; name = \"George Washington\"; age = 67 }\n    ; { id = 1; name = \"Alexander Hamilton\"; age = 47 }\n    ; { id = 2; name = \"Abraham Lincoln\"; age = 56 }\n    ]\n;;\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"Because we're no longer using a css file, the first part of the file","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"re-defines all of the styling in OCaml using ","type":"SimpleText"},{"code":"Css_gen","type":"InlinedCode"},{"text":". However, these","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"styles are not applied automatically, so we also need to add calls to","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"Vdom.Attr.style","type":"InlinedCode"},{"text":" everywhere.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"In a particularly egregious case, we changed from using ","type":"SimpleText"},{"code":"List.map","type":"InlinedCode"},{"text":" to","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"List.mapi","type":"InlinedCode"},{"text":", which allowed us to check if the row is even or odd,","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"something that was previously done for us by our stylesheet. This brings","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"us to our first major drawback of using inline style attributes:","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"pseudo-selectors are unavailable. Some of these, like ","type":"SimpleText"},{"code":":nth-child","type":"InlinedCode"},{"text":", are","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"implementable in our view-calculation logic because we're manually","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"constructing the lists anyway. However, other pseudo-selectors like","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":":hover","type":"InlinedCode"},{"text":" or ","type":"SimpleText"},{"code":":focus","type":"InlinedCode"},{"text":" are impossible, and others, like ","type":"SimpleText"},{"code":":nth-of-type","type":"InlinedCode"},{"text":" are","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"possible, but hair-pullingly annoying.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"type":"StrongEmphasis","content":[{"text":"Pros","type":"SimpleText"}]}]},{"delimiter":".","startNumber":1,"type":"OrderedList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"No need to worry about identifier clashes because styles are stuck","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"directly on the nodes themselves.","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"If used in a library, the styles come with the library instead of","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"being another css file that library users need to know about and","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"manage.","type":"SimpleText"}]}]}]},{"type":"Paragraph","content":[{"type":"StrongEmphasis","content":[{"text":"Cons","type":"SimpleText"}]}]},{"delimiter":".","startNumber":1,"type":"OrderedList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Much more verbose.","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Many css-attributes are missing from the ","type":"SimpleText"},{"code":"Css_gen","type":"InlinedCode"},{"text":" library (you can","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"work around this with ","type":"SimpleText"},{"code":"Css_gen.create","type":"InlinedCode"},{"text":").","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Pseudo-selectors just aren't available.","type":"SimpleText"}]}]}]}]},{"id":"css-ppx","title":"CSS Ppx","type":"Section","content":[{"type":"Paragraph","content":[{"text":"The third option is to use a brand new ppx: ","type":"SimpleText"},{"code":"ppx_css","type":"InlinedCode"},{"text":"! With this ppx,","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"you can write css code in your .ml files, and it will be loaded into the","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"document at page-load. To use the ppx, add it to your jbuild like so:","type":"SimpleText"}]},{"lang":"diff","snippet":" (executables (\n   (names (main))\n   (libraries (bonsai_web))\n+  (preprocess (pps (ppx_jane ppx_css)))\n   (js_of_ocaml ())))\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"And now you can bind a module to the result of a css ppx invocation:","type":"SimpleText"}]},{"lang":"ocaml","snippet":"module Style =\n  [%css\n    stylesheet\n      {|\ntable.politicians {\n  border-collapse: collapse;\n  border: 1px solid brown;\n}\n\ntable.politicians td {\n  padding: 4px;\n}\n\ntable.politicians thead {\n  text-align: center;\n  background: brown;\n  color: antiquewhite;\n  font-weight: bold;\n}\n\ntable.politicians tr {\n  background: antiquewhite;\n}\n\ntable.politicians tr:nth-child(even) {\n  background: wheat;\n}\n    |}]\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"This is the exact same css from the second example! Notice that it still","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"has a \"politicians\" class before every rule. With this new ","type":"SimpleText"},{"code":"Style","type":"InlinedCode"},{"type":"SoftLineBreak"},{"text":"module bound, we can ","type":"SimpleText"},{"type":"Emphasis","content":[{"text":"almost","type":"SimpleText"}]},{"text":" keep the same ocaml view generation as we","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"had originally:","type":"SimpleText"}]},{"lang":"ocaml","snippet":"let table_with_ppx_css rows =\n  let open Vdom.Node in\n  let thead = thead [ td [ text \"id\" ]; td [ text \"name\" ]; td [ text \"age\" ] ] in\n  let tbody =\n    rows\n    |> List.map ~f:(fun { id; name; age } ->\n      tr [ td [ textf \"%d\" id ]; td [ text name ]; td [ textf \"%d\" age ] ])\n    |> tbody\n  in\n  table ~attrs:[ Style.politicians ] [ thead; tbody ]\n;;\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"The only difference between this function and the first one we wrote is","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"this:","type":"SimpleText"}]},{"lang":"diff","snippet":"- table ~attr:(Vdom.Attr.class_ \"politicians\") [ thead; tbody ]\n+ table ~attr:(Vdom.Attr.class_ Style.politicians) [ thead; tbody ]\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"This ","type":"SimpleText"},{"code":"Style.politicians","type":"InlinedCode"},{"text":" value was generated by the ppx because it","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"noticed that we were using it as a class-name. The ppx will also","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"uniquify all of the class names and ids that it finds in the stylesheet.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"As an example, the first rule's selector will become","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"table.politicians_hash_e82ee99238","type":"InlinedCode"},{"text":", where the unique name is generated","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"by hashing the contents of the css string as well as the path to the","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"file containing the ppx. This means that ","type":"SimpleText"},{"code":"Style.politicians","type":"InlinedCode"},{"text":" is a string","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"with the value ","type":"SimpleText"},{"code":"politicians_hash_e82ee99238","type":"InlinedCode"},{"text":", which we use for the","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"classname.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"This kind of identifier hashing is useful because it means that","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"component authors don't need to worry about collisions.","type":"SimpleText"}]}]},{"id":"rewrite-flag","title":"[~rewrite] flag","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Sometimes, like when interacting with customization APIs that require","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"specific classnames for CSS customization, ppx_css's hygenic identifier","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"hashing could get in your way. With [~rewrite], you get to choose the","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"name for an identifier rather than ppx_css choosing - or rather","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"hashing - it for you.","type":"SimpleText"}]},{"lang":"ocaml","snippet":"(* A table library's customization API _needs_ users to style the \"table-header\" class. *)\nstylesheet {|.table-header {...}|}\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"You can disable hashing when needed by using the optional ","type":"SimpleText"},{"code":"~rewrite","type":"InlinedCode"},{"type":"SoftLineBreak"},{"text":"parameter.","type":"SimpleText"}]},{"lang":"ocaml","snippet":"(* Scenario: A table library's customization API _needs_ users to style the \"table-header\" class. *)\nstylesheet ~rewrite:[\"table-header\", \"table-header\"] {|.table-header {...}|}\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"The above segment will \"rewrite\" ","type":"SimpleText"},{"code":"table-header","type":"InlinedCode"},{"text":" into ","type":"SimpleText"},{"code":"table-header","type":"InlinedCode"},{"type":"SoftLineBreak"},{"text":"overriding the default hashing behavior.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Some other times, you might still want hygenic hashing, but need the","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"same identifier to have the same hash between two specific [%css","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"stylesheet] invocations. Here are some examples of the rewrite flag in","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"action:","type":"SimpleText"}]},{"lang":"ocaml","snippet":"stylesheet ~rewrite:[ \"table-header\", \"table-header\"; \"table_row\", \"table-row\" ] {|...|} (* Rewrites multiple identifiers at once. *)\nstylesheet ~rewrite:[ \"my_table\", My_table_component.table ] {|...|} (* References an identifier defined in another module *) |xxx}];\n","lineNumber":"","type":"Snippet"}]},{"id":"theming-through-ppx-css","title":"Theming through PPX CSS","type":"Section","content":[{"type":"Paragraph","content":[{"text":"One additional benefit is that this ppx/inliner opens up doors for","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"allowing components to be customized by their users. The ","type":"SimpleText"},{"code":"Style","type":"InlinedCode"},{"text":" module","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"that the ppx derived actually has this signature:","type":"SimpleText"}]},{"lang":"ocaml","snippet":"sig\n  module type S  = sig\n    val politicians : string\n  end\n\n  type t = (module S)\n\n  val default : t\n  val politicians : string\nend\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"While we were just using the default ","type":"SimpleText"},{"code":"politicians","type":"InlinedCode"},{"text":" value, the module","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"type and a default packed module implementing that module type are","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"intended to be used for making it easy for component authors to allow","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"their users to theme the components.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"By tweaking the code slightly we can see how this is possible:","type":"SimpleText"}]},{"lang":"diff","snippet":"- let table_with_ppx_css rows =\n+ let table_with_ppx_css ?(theme=Style.default) rows =\n+   let module Style = (val theme) in\n    let open Vdom.Node in\n    let thead =\n      thead [ td [ text \"id\" ]; td [ text \"name\" ]; td [ text \"age\" ] ]\n    in\n    let tbody =\n      rows\n      |> List.map ~f:(fun { id; name; age } ->\n        tr\n          [ td [ textf \"%d\" id ]; td [ text name ]; td [ textf \"%d\" age ] ])\n      |> tbody\n    in\n    table ~attr:(Vdom.Attr.class_ Style.politicians) [ thead; tbody ]\n  ;;\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"now someone could make a new module which implements that type:","type":"SimpleText"}]},{"lang":"ocaml","snippet":"module My_theme =\n  [%css\n    stylesheet\n      {|\ntable.politicians {\n  border-collapse: collapse;\n  border: 1px solid black;\n}\n\ntable.politicians td {\n  padding: 4px;\n}\n\ntable.politicians thead {\n  text-align: center;\n  background: black;\n  color: white;\n  font-weight: bold;\n}\n\ntable.politicians td {\n  border: 1px solid black;\n}\n\n    |}]\n\nlet table =\n  themeable_table\n    ~theme:(module My_theme)\n    [ { id = 0; name = \"George Washington\"; age = 67 }\n    ; { id = 1; name = \"Alexander Hamilton\"; age = 47 }\n    ; { id = 2; name = \"Abraham Lincoln\"; age = 56 }\n    ]\n;;\n","lineNumber":"","type":"Snippet"},{"src":"/bonsai/bonsai-build/#themeable-table","fit":true,"light":{"background":"#e9edf2","color-scheme":"light","color":"#28487c"},"dark":{"background":"#101318","color-scheme":"dark","color":"#bac9e2"},"type":"Iframe"},{"type":"Paragraph","content":[{"text":"Due to the nature of the generated code, there are a few restrictions on","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"the person building a custom theme:","type":"SimpleText"}]},{"delimiter":".","startNumber":1,"type":"OrderedList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"No new identifiers are allowed. This means that if a component","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"author uses a dumb name like \"politicians\", then a theme author","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"needs to as well.","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"type":"Emphasis","content":[{"text":"All","type":"SimpleText"}]},{"text":" identifiers present in the component definition must be used.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"You can use an empty rule like ","type":"SimpleText"},{"code":".politicians {}","type":"InlinedCode"},{"text":" in order to meet","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"this requirement if you wanted to avoid themeing something.","type":"SimpleText"}]}]}]},{"type":"Paragraph","content":[{"text":"These restrictions may seem onerous, but it's a lot like using a record","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"in OCaml: the author of the record gets to decide what the names of the","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"fields are, and if someone wants to construct a value of that record,","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"they can't just leave out the fields that they don't care about. This","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"means that component authors should think ahead and ask themselves \"what","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"kind of customizability will users of this component want?\" before","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"settling on a set of identifiers and picking which nodes they're","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"attached to.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"There are (plans for) other kinds of ppx transformations other than just","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"the identifier re-writing, such as automatically introducing the","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"namespacing classnames for you. Those aren't here yet, but they might be","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"soon.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"It should be noted that even with the classname hashing, it's still","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"possible to write rules that affect more than you might like. I actually","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"included a number of bugs of this form in the examples so far (!).","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":".table.politicians td","type":"InlinedCode"},{"text":" affects ","type":"SimpleText"},{"type":"Emphasis","content":[{"text":"every","type":"SimpleText"}]},{"text":" td inside of the table, even","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"tables within tables. So if one of the cells of this table contained","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"another table that was styled differently, we'd run the risk of","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"overwriting it. The \"correct\" rule in this case would be to fully","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"qualify the paths to the elements, so ","type":"SimpleText"},{"code":"table.politicians td","type":"InlinedCode"},{"text":" would","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"become ","type":"SimpleText"},{"code":"table.politicians > tbody > tr > td","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"type":"Paragraph","content":[{"type":"StrongEmphasis","content":[{"text":"Pros","type":"SimpleText"}]}]},{"delimiter":".","startNumber":1,"type":"OrderedList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Full access to CSS language including pseudoselectors (like","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":":nth-child(even)","type":"InlinedCode"},{"text":", or ","type":"SimpleText"},{"code":":hover","type":"InlinedCode"},{"text":")","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Good debugging support in Chrome Devtools","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"No need to worry about identifier clashes because these identifiers","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"are hashed before being used.","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"If used in a library, the styles come with the library instead of","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"being another css file that library users need to know about and","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"manage.","type":"SimpleText"}]}]}]},{"type":"Paragraph","content":[{"type":"StrongEmphasis","content":[{"text":"Cons","type":"SimpleText"}]}]},{"delimiter":".","startNumber":1,"type":"OrderedList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"It's still up to you to make sure that styles aren't too general","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"(this is going to be addresed in further releases of the ppx.","type":"SimpleText"}]}]}]}]}],"lastModifiedTime":1695640724031,"tocItem":{"chapterTitle":"Guide","pageTitle":"Css","pageMeta":{"title":["Css"]},"dirName":"guide","fileName":"08-css","viewOnRelativePath":null,"pageSectionIdTitles":[{"title":"Handwritten .css Files","id":"handwritten-css-files"},{"title":"Vdom.Attr.style","id":"vdom-attr-style"},{"title":"CSS Ppx","id":"css-ppx"},{"title":"[~rewrite] flag","id":"rewrite-flag"},{"title":"Theming through PPX CSS","id":"theming-through-ppx-css"}]}},{"type":"Page","content":[{"type":"Paragraph","content":[{"text":"Bonsai encourages declarative UI construction. A computation is defined","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"as a list of dependencies and a function which reads the current value","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"of those dependencies, producing a new value. A computation defined in","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"this way doesn't care what the previous values of its dependencies were;","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"it always operates on their current value.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"However, sometimes it can be helpful to witness a transition from one","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"value to another. In Bonsai, we have the","type":"SimpleText"},{"type":"SoftLineBreak"},{"url":"https://ocaml.org/p/bonsai/v0.15.0/doc/Bonsai/Edge/index.html","isFile":false,"type":"Link","content":[{"code":"Bonsai.Edge","type":"InlinedCode"}]},{"type":"SoftLineBreak"},{"text":"module, which has a collection of functions which can notice things like","type":"SimpleText"}]},{"delimiter":".","startNumber":1,"type":"OrderedList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"the passage of time","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"the activation and deactivation of components","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"changing of the contents of a Value.t","type":"SimpleText"}]}]}]},{"type":"Paragraph","content":[{"text":"and schedule Effects when they occur.","type":"SimpleText"}]},{"id":"after_display","title":"after_display","type":"Section","content":[{"type":"Paragraph","content":[{"text":"The main ","type":"SimpleText"},{"code":"Edge","type":"InlinedCode"},{"text":" function we'll take a look at is","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"Bonsai.Edge.lifecycle","type":"InlinedCode"},{"text":", which takes a number of optional parameters of","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"type ","type":"SimpleText"},{"code":"unit Effect.t Value.t","type":"InlinedCode"},{"text":". The first of these is ","type":"SimpleText"},{"code":"after_display","type":"InlinedCode"},{"text":".","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"Edge.lifecycle","type":"InlinedCode"},{"text":" schedules the effect passed in via ","type":"SimpleText"},{"code":"after_display","type":"InlinedCode"},{"text":" as","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"the last operation in the Bonsai render-loop, right after the DOM has","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"been updated.","type":"SimpleText"}]},{"lang":"ocaml","snippet":"let frame_counter =\n  let%sub frames, set_frames = Bonsai.state 0 in\n  let%sub () =\n    Bonsai.Edge.lifecycle\n      ~after_display:\n        (let%map frames = frames\n         and set_frames = set_frames in\n         set_frames (frames + 1))\n      ()\n  in\n  let%arr frames = frames in\n  Vdom.Node.textf \"this component has been alive for %d frames\" frames\n;;\n","lineNumber":"","type":"Snippet"},{"src":"/bonsai/bonsai-build/#after-display","fit":true,"light":{"background":"#e9edf2","color-scheme":"light","color":"#28487c"},"dark":{"background":"#101318","color-scheme":"dark","color":"#bac9e2"},"type":"Iframe"},{"type":"Paragraph","content":[{"text":"The text I chose for that component was very intentional. I wrote \"this","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"component has been alive for {n} frames\" instead of \"the application has","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"been running for {n} frames\". This is because Edge functions only run if","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"their computation is active. Let's start with a demo, and then discuss","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"what \"active\" means.","type":"SimpleText"}]},{"lang":"ocaml","snippet":"let frame_toggler =\n  let%sub showing, set_showing = Bonsai.state false in\n  let%sub output =\n    match%sub showing with\n    | true -> frame_counter\n    | false -> Bonsai.const Vdom.Node.none\n  in\n  let%arr showing = showing\n  and set_showing = set_showing\n  and output = output in\n  let toggle_showing = set_showing (not showing) in\n  let button_text = if showing then \"disable counter\" else \"enable counter\" in\n  let toggle_button =\n    Vdom.Node.button\n      ~attrs:[ Vdom.Attr.on_click (fun _ -> toggle_showing) ]\n      [ Vdom.Node.text button_text ]\n  in\n  Vdom.Node.div [ toggle_button; output ]\n;;\n","lineNumber":"","type":"Snippet"},{"src":"/bonsai/bonsai-build/#only-when-active","fit":true,"light":{"background":"#e9edf2","color-scheme":"light","color":"#28487c"},"dark":{"background":"#101318","color-scheme":"dark","color":"#bac9e2"},"type":"Iframe"},{"type":"Paragraph","content":[{"text":"If you disable the component (wait a few seconds), you'll notice that","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"the counter picks up where it left off rather than continuing in the","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"background.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"As mentioned earlier, ","type":"SimpleText"},{"code":"after_display","type":"InlinedCode"},{"text":" only runs when the computation is","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"\"active\", and as this example demonstrates, being inside of a","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"match%sub","type":"InlinedCode"},{"text":" is one way to change the activity status of a computation.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"In fact, aside from ","type":"SimpleText"},{"code":"match%sub","type":"InlinedCode"},{"text":", there's only one other combinator that","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"influences the active status: ","type":"SimpleText"},{"code":"Bonsai.assoc","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"attentionType":"note","content":[{"type":"Paragraph","content":[{"text":"Technically, ","type":"SimpleText"},{"code":"if%sub","type":"InlinedCode"},{"text":" and ","type":"SimpleText"},{"code":"Bonsai.enum_","type":"InlinedCode"},{"text":" also have this property, but in","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"reality, ","type":"SimpleText"},{"code":"if%sub","type":"InlinedCode"},{"text":" and ","type":"SimpleText"},{"code":"match%sub","type":"InlinedCode"},{"text":" are implemented in terms of ","type":"SimpleText"},{"code":"enum_","type":"InlinedCode"},{"text":",","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"so they're all counted together.","type":"SimpleText"}]}],"type":"AttentionBlock"},{"type":"Paragraph","content":[{"code":"Bonsai.assoc","type":"InlinedCode"},{"text":" is used to build a dynamic number of instances of a","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"computation.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Just like how","type":"SimpleText"}]},{"lang":"ocaml","snippet":"let%sub a = my_component in\nlet%sub b = my_component in\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"will create two ","type":"SimpleText"},{"type":"Emphasis","content":[{"text":"distinct","type":"SimpleText"}]},{"text":" instances of ","type":"SimpleText"},{"code":"my_component","type":"InlinedCode"},{"text":", each with their","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"own state, ","type":"SimpleText"},{"code":"Bonsai.assoc","type":"InlinedCode"},{"text":" can instantiate a dynamic number of","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"computations, one instantiation per key-value pair from an incoming","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"_ Map.t Value.t","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"I have a small library,","type":"SimpleText"},{"type":"SoftLineBreak"},{"url":"https://ocaml.org/p/bonsai/v0.15.0/doc/Bonsai_web_ui_extendy/index.html","isFile":false,"type":"Link","content":[{"text":"Bonsai_web_ui_extendy","type":"SimpleText"}]},{"text":",","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"which uses ","type":"SimpleText"},{"code":"assoc","type":"InlinedCode"},{"text":" to implement a component for easily creating and","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"deleting instances of another component.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"We'll reuse the ","type":"SimpleText"},{"code":"frame_counter","type":"InlinedCode"},{"text":" component built in the first example,","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"and combine it with ","type":"SimpleText"},{"code":"extendy","type":"InlinedCode"},{"text":" to get multiple ","type":"SimpleText"},{"code":"frame_counter","type":"InlinedCode"},{"text":"s.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Let's see it in use:","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"<!-- $MDX file=../../examples/bonsai_guide_code/edge_examples.ml,part=extendy-use -->","type":"InlinedCode"},{"text":"{=html}","type":"SimpleText"}]},{"lang":"ocaml","snippet":"let wrap_remove frame_counter remove =\n  let x_button =\n    Vdom.Node.button\n      ~attrs:[ Vdom.Attr.on_click (fun _ -> remove) ]\n      [ Vdom.Node.text \"x\" ]\n  in\n  Vdom.Node.div [ x_button; frame_counter ]\n;;\n\nlet many_frame_watches =\n  let%sub { contents; append; _ } = extendy frame_counter ~wrap_remove in\n  let%arr contents = contents\n  and append = append in\n  let append_button =\n    Vdom.Node.button\n      ~attrs:[ Vdom.Attr.on_click (fun _ -> append) ]\n      [ Vdom.Node.text \"add\" ]\n  in\n  Vdom.Node.div (append_button :: Map.data contents)\n;;\n","lineNumber":"","type":"Snippet"},{"src":"/bonsai/bonsai-build/#extendy-use","fit":true,"light":{"background":"#e9edf2","color-scheme":"light","color":"#28487c"},"dark":{"background":"#101318","color-scheme":"dark","color":"#bac9e2"},"type":"Iframe"},{"type":"Paragraph","content":[{"text":"By clicking on the \"add\" button, we create multiple frame-counters, each","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"with their own state, each which began counting at the moment of their","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"creation. It might not be obvious, but clicking on the ","type":"SimpleText"},{"code":"x","type":"InlinedCode"},{"text":" button not","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"only removes the component from the view, but from the entire Bonsai","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"computation graph, so the ","type":"SimpleText"},{"code":"on_display","type":"InlinedCode"},{"text":" effect is also stopped entirely.","type":"SimpleText"}]}]},{"id":"on_activate-on_deactivate","title":"on_activate / on_deactivate","type":"Section","content":[{"type":"Paragraph","content":[{"text":"The other two optional parameters to ","type":"SimpleText"},{"code":"Bonsai.Edge.lifecycle","type":"InlinedCode"},{"text":" are","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"on_activate","type":"InlinedCode"},{"text":" and ","type":"SimpleText"},{"code":"on_deactivate","type":"InlinedCode"},{"text":", both of which share the same type as","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"after_display","type":"InlinedCode"},{"text":": ","type":"SimpleText"},{"code":"unit Effect.t Value.t","type":"InlinedCode"},{"text":". These effects are run whenever","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"the lifecycle computation becomes active or inactive.","type":"SimpleText"}]},{"attentionType":"note","content":[{"type":"Paragraph","content":[{"text":"By incorporating a ","type":"SimpleText"},{"code":"lifecycle","type":"InlinedCode"},{"text":" computation into a component of yours,","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"the ","type":"SimpleText"},{"code":"on_activate","type":"InlinedCode"},{"text":" / ","type":"SimpleText"},{"code":"on_deactivate","type":"InlinedCode"},{"text":" callbacks are effectively measuring","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"the activation/deactivation of the containing component.","type":"SimpleText"}]}],"type":"AttentionBlock"},{"type":"Paragraph","content":[{"text":"Let's modify the lifecycle component to use these new functions. First,","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"though, we'll want to do something when the activation/deactivation","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"occurs. For that, I built a tiny logging component which will let me","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"append a list of strings sent by the ","type":"SimpleText"},{"code":"frame_counter","type":"InlinedCode"},{"text":" component.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Ok, on to the extension of ","type":"SimpleText"},{"code":"frame_counter","type":"InlinedCode"},{"text":":","type":"SimpleText"}]},{"lang":"ocaml","snippet":"let frame_counter (log : (string -> unit Ui_effect.t) Value.t) =\n  let%sub frames, set_frames = Bonsai.state 0 in\n  let%sub () =\n    Bonsai.Edge.lifecycle\n      ~on_activate:\n        (let%map log = log in\n         log \"🚀\")\n      ~on_deactivate:\n        (let%map log = log in\n         log \"🔥\")\n      ~after_display:\n        (let%map frames = frames\n         and set_frames = set_frames in\n         set_frames (frames + 1))\n      ()\n  in\n  let%arr frames = frames in\n  Vdom.Node.textf \"this component has been alive for %d frames\" frames\n;;\n","lineNumber":"","type":"Snippet"},{"src":"/bonsai/bonsai-build/#extendy-use-2","fit":true,"light":{"background":"#e9edf2","color-scheme":"light","color":"#28487c"},"dark":{"background":"#101318","color-scheme":"dark","color":"#bac9e2"},"type":"Iframe"},{"attentionType":"note","content":[{"type":"Paragraph","content":[{"text":"If you don't like the look of","type":"SimpleText"}]},{"lang":"ocaml","snippet":"let%map log = log in\nlog \"🔥\"\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"you could also write it as","type":"SimpleText"}]},{"lang":"ocaml","snippet":"log >>| Fn.( |> ) \"🔥\"\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"code":"<br/>","type":"InlinedCode"},{"text":"{=html}","type":"SimpleText"}]},{"attentionType":"note","content":[{"type":"Paragraph","content":[{"text":"Please don't though","type":"SimpleText"}]}],"type":"AttentionBlock"}],"type":"AttentionBlock"},{"lang":"","snippet":"# on_change\n\nWith the `lifecycle` function as a primitive, we can implement other\nuseful edge-triggering functions. One of these is also included in the\n`Bonsai.Edge` module: `on_change'`.\n\n`on_change'` monitors a `'a Value.t`, and when that value changes, it\ncalls a user-provided function, giving that function both the previous\nand current value. This user-provided function returns an `Effect.t`,\nwhich will be scheduled whenever the value changes.\n\n``````attention-note\nYou currently have all the tools to implement `on_change'` yourself, and\nyou can find the implementation\n[here](https://github.com/janestreet/bonsai/blob/master/src/proc.ml#L832).\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"Combining the counter-component from ","type":"SimpleText"},{"url":"/bonsai/guide/03-state","isFile":false,"type":"Link","content":[{"text":"Chapter 3","type":"SimpleText"}]},{"text":" and the","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"logging component that I used above, we can write a component which","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"contains both a counter and a log, where the log is updated when the","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"value changes.","type":"SimpleText"}]},{"lang":"ocaml","snippet":"let logging_counter =\n  let%sub log_view, log = logger in\n  let%sub counter_view, counter = counter in\n  let%sub () =\n    let callback =\n      let%map log = log in\n      fun prev cur ->\n        match prev with\n        | None -> Ui_effect.Ignore\n        | Some prev -> log (if prev < cur then \"🚀\" else \"🔥\")\n    in\n    Bonsai.Edge.on_change'\n      ~sexp_of_model:[%sexp_of: Int.t]\n      ~equal:[%equal: Int.t]\n      counter\n      ~callback\n  in\n  let%arr log_view = log_view\n  and counter_view = counter_view in\n  Vdom.Node.div [ counter_view; log_view ]\n;;\n","lineNumber":"","type":"Snippet"},{"src":"/bonsai/bonsai-build/#logging-counter","fit":true,"light":{"background":"#e9edf2","color-scheme":"light","color":"#28487c"},"dark":{"background":"#101318","color-scheme":"dark","color":"#bac9e2"},"type":"Iframe"},{"id":"on_activate-on_deactivate-implications-for-intelligibility-and-testing","level":2,"title":"Implications for intelligibility and testing","type":"SubHeading"},{"type":"Paragraph","content":[{"text":"Declarative programs are easy to reason about and test. Extensive use of","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"the ","type":"SimpleText"},{"code":"Edge","type":"InlinedCode"},{"text":" module will make your program less and less declarative.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Every time that you have the opportunity, you should opt for using","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"anything other than an ","type":"SimpleText"},{"code":"Edge.*","type":"InlinedCode"},{"text":" function.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"However, sometimes it's necessary, and we have testing helpers to make","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"your life a bit easier when you do use edge triggering. Because","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"after_display","type":"InlinedCode"},{"text":" runs its effect, well, after the display has occurred,","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"how would this interact with Bonsai testing functions, like","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"Handle.show","type":"InlinedCode"},{"text":"?","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"To demonstrate, we'll build an ","type":"SimpleText"},{"type":"Emphasis","content":[{"text":"awful","type":"SimpleText"}]},{"text":" Bonsai component: a linear chain","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"of ","type":"SimpleText"},{"code":"on_changes","type":"InlinedCode"},{"text":":","type":"SimpleText"}]},{"lang":"ocaml","snippet":"let chain_computation =\n  let%sub a = Bonsai.const \"x\" in\n  let%sub b, set_b =\n    Bonsai.state \" \" ~sexp_of_model:[%sexp_of: String.t] ~equal:[%equal: String.t]\n  in\n  let%sub c, set_c =\n    Bonsai.state \" \" ~sexp_of_model:[%sexp_of: String.t] ~equal:[%equal: String.t]\n  in\n  let%sub d, set_d =\n    Bonsai.state \" \" ~sexp_of_model:[%sexp_of: String.t] ~equal:[%equal: String.t]\n  in\n  let%sub () =\n    Bonsai.Edge.on_change\n      ~sexp_of_model:[%sexp_of: String.t]\n      ~equal:[%equal: String.t]\n      a\n      ~callback:set_b\n  in\n  let%sub () =\n    Bonsai.Edge.on_change\n      ~sexp_of_model:[%sexp_of: String.t]\n      ~equal:[%equal: String.t]\n      b\n      ~callback:set_c\n  in\n  let%sub () =\n    Bonsai.Edge.on_change\n      ~sexp_of_model:[%sexp_of: String.t]\n      ~equal:[%equal: String.t]\n      c\n      ~callback:set_d\n  in\n  return (Value.map4 a b c d ~f:(sprintf \"a:%s b:%s c:%s d:%s\"))\n;;\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"Because ","type":"SimpleText"},{"code":"on_change","type":"InlinedCode"},{"text":" triggers at the end of each frame, it should take 4","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"frames to settle. And indeed, in a unit test, that's exactly what we'll","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"see:","type":"SimpleText"}]},{"lang":"ocaml","snippet":"let%expect_test \"chained on_change\" =\n  let handle = Handle.create (Result_spec.string (module String)) chain_computation in\n  Handle.show handle;\n  [%expect {| a:x b:  c:  d: |}];\n  Handle.show handle;\n  [%expect {| a:x b:x c:  d: |}];\n  Handle.show handle;\n  [%expect {| a:x b:x c:x d: |}];\n  Handle.show handle;\n  [%expect {| a:x b:x c:x d:x |}];\n  Handle.show handle;\n  [%expect {| a:x b:x c:x d:x |}]\n;;\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"But ","type":"SimpleText"},{"code":"Bonsai_web_test.Handle","type":"InlinedCode"},{"text":" has a function that makes this a bit nicer:","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"recompute_view_until_stable","type":"InlinedCode"},{"text":", so we can rewrite the test in a way that","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"skips all the intermediate frames:","type":"SimpleText"}]},{"lang":"ocaml","snippet":"let%expect_test \"chained on_change with recompute_view_until_stable\" =\n  let handle = Handle.create (Result_spec.string (module String)) chain_computation in\n  Handle.recompute_view_until_stable handle;\n  Handle.show handle;\n  [%expect {| a:x b:x c:x d:x |}]\n;;\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"code":"recompute_view_until_stable","type":"InlinedCode"},{"text":" is handy, but it's hiding intermediate","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"states. If those intermediate states allow for logical bugs in your","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"application, then you might miss them. As mentioned above: avoid ","type":"SimpleText"},{"code":"Edge","type":"InlinedCode"},{"type":"SoftLineBreak"},{"text":"if you can; it's a ","type":"SimpleText"},{"type":"Emphasis","content":[{"text":"sharp","type":"SimpleText"}]},{"text":" tool.","type":"SimpleText"}]}]}],"lastModifiedTime":1695640604521,"tocItem":{"chapterTitle":"Guide","pageTitle":"Edge Triggering","pageMeta":{"title":["Edge Triggering"]},"dirName":"guide","fileName":"09-edge-triggering","viewOnRelativePath":null,"pageSectionIdTitles":[{"title":"after_display","id":"after_display"},{"title":"on_activate / on_deactivate","id":"on_activate-on_deactivate"}]}},{"type":"Page","content":[{"type":"Paragraph","content":[{"text":"For any web application that supports navigation between different","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"pages, URLs can be an easy way to dramatically improve the user","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"experience: they automatically give your app some very useful features","type":"SimpleText"}]},{"delimiter":".","startNumber":1,"type":"OrderedList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Users can save and share links to specific navigational states","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"within the app","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"The browser's forward and back buttons allow quick historical","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"navigation","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Reading and editing URLs can be used (as a last resort maybe) for","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"precise navigation","type":"SimpleText"}]}]}]},{"type":"Paragraph","content":[{"text":"It might not be obvious at first, but URL integration is bidirectional:","type":"SimpleText"}]},{"bulletMarker":"-","tight":true,"type":"BulletList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"when the URL changes, the application responds by updating its","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"navigation","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"when the user navigates in the app, the URL should be updated to","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"match","type":"SimpleText"}]}]}]},{"type":"Paragraph","content":[{"text":"In Bonsai, the ","type":"SimpleText"},{"code":"'a Url_var.t","type":"InlinedCode"},{"text":" type is used to manage this","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"synchronization; when given a parsing function (that parses a URL into","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"values of your domain-specific ","type":"SimpleText"},{"code":"'a","type":"InlinedCode"},{"text":" type) and an \"unparsing\" function","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"(which turns ","type":"SimpleText"},{"code":"'a","type":"InlinedCode"},{"text":" back into a URL), the url-var can be treated like a","type":"SimpleText"},{"type":"SoftLineBreak"},{"url":"/bonsai/guide/02-dynamism","isFile":false,"type":"Link","content":[{"code":"Var.t","type":"InlinedCode"}]},{"text":" and it'll handle all the browser-specific","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"url management for you!","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"In this guide, we'll start by building a url-var by implementing parse","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"and unparse by hand, but the rest of this chapter will focus on the API","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"built for the typed-fields ppx, which will simultaneously generate the","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"parser ","type":"SimpleText"},{"type":"Emphasis","content":[{"text":"and","type":"SimpleText"}]},{"text":" unparser functions for you (and ensure that the printer and","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"parser round-trip)!","type":"SimpleText"}]},{"id":"handwritten-parse-unparse","title":"Handwritten Parse / Unparse","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Imagine you have a site with the following URLs:","type":"SimpleText"}]},{"bulletMarker":"-","tight":true,"type":"BulletList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"code":"/search?q=capybara","type":"InlinedCode"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"code":"/settings","type":"InlinedCode"}]}]}]},{"type":"Paragraph","content":[{"text":"URL Var's previous API allowed you to parse/unparse this URL by you","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"manually implementing its parse and unparse functions:","type":"SimpleText"}]},{"lang":"ocaml","snippet":"  module My_google_clone = struct\n    type t =\n      | Homepage\n      | Search of string\n    [@@deriving sexp, equal]\n\n    let parse_exn ({ path; query; _ } : Url_var.Components.t) : t =\n      let path = String.split path ~on:'/' in\n      match path with\n      | [ \"home\" ] -> Homepage\n      | [ \"search\" ] ->\n        (match Map.find (query : _ String.Map.t) \"q\" with\n         | Some [ query ] -> Search query\n         | None | Some [] -> failwith \"search missing query param\"\n         | Some (_ :: _ :: _) -> failwith \"search with too many query params\")\n      | _ -> failwith \"unknown path\"\n    ;;\n\n    let unparse (t : t) : Url_var.Components.t =\n      match t with\n      | Homepage -> Url_var.Components.create ~path:\"home\" ()\n      | Search query ->\n        Url_var.Components.create\n          ~path:\"search\"\n          ~query:(String.Map.singleton \"q\" [ query ])\n          ()\n    ;;\n  end\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"You would have needed to write your own tests in order verify that your","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"parser/unparser successfully round-trip (","type":"SimpleText"},{"code":"parse_exn(unparse(x))","type":"InlinedCode"},{"text":" gives","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"you back the original ","type":"SimpleText"},{"code":"x","type":"InlinedCode"},{"text":").","type":"SimpleText"}]}]},{"id":"typed-field-parse-unparse","title":"Typed field Parse / Unparse","type":"Section","content":[{"type":"Paragraph","content":[{"text":"With URL Var's typed field API, you can define a module that is able to","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"parse a URL into ","type":"SimpleText"},{"code":"My_google_clone.t","type":"InlinedCode"},{"text":" and unparse ","type":"SimpleText"},{"code":"My_google_clone.t","type":"InlinedCode"},{"type":"SoftLineBreak"},{"text":"into a URL:","type":"SimpleText"}]},{"lang":"ocaml","snippet":"module My_google_clone = struct\n  type t =\n    | Homepage\n    | Search of string\n  [@@deriving typed_variants, sexp, equal]\n\n  let parser_for_variant : type a. a Typed_variant.t -> a Parser.t = function\n    | Homepage -> Parser.unit\n    | Search -> Parser.from_query_required ~key:\"q\" Value_parser.string\n  ;;\nend\n\nlet parser = Parser.Variant.make (module My_google_clone)\nlet versioned_parser = Versioned_parser.first_parser parser\n\nlet%expect_test _ =\n  Parser.check_ok_and_print_urls_or_errors parser;\n  [%expect\n    {|\n    URL parser looks good!\n    ┌────────────────────┐\n    │ All urls           │\n    ├────────────────────┤\n    │ /homepage          │\n    │ /search?q=<string> │\n    └────────────────────┘ |}]\n;;\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"After creating a ","type":"SimpleText"},{"code":"My_google_clone.t Url_var.t","type":"InlinedCode"},{"text":" like this:","type":"SimpleText"}]},{"lang":"","snippet":"let url_var =\n  Url_var.Typed.make\n    (module My_google_clone)\n    versioned_parser\n    ~fallback:(fun _exn _components -> My_google_clone.Whoops)\n;;\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"You can then get an automatically-updating ","type":"SimpleText"},{"code":"My_google_clone.t Value.t","type":"InlinedCode"},{"type":"SoftLineBreak"},{"text":"with ","type":"SimpleText"},{"code":"Url_var.value","type":"InlinedCode"},{"text":" which updates any time that the url changes and can","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"be threaded into the Bonsai computation like any other ","type":"SimpleText"},{"code":"Value.t","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"On the other side, ","type":"SimpleText"},{"code":"Url_var.set_effect","type":"InlinedCode"},{"text":" can be called to to change the","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"content of the url-var, and in doing so, will update the URL to reflect","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"it.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"The rest of the operations for ","type":"SimpleText"},{"code":"Url_var.t","type":"InlinedCode"},{"text":" are intended to be used","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"outside of a bonsai app:","type":"SimpleText"}]},{"lang":"","snippet":"type 'a t\n\n(* for use in bonsai computation *)\nval value : 'a t -> 'a Value.t\nval set_effect : 'a t -> 'a -> unit Effect.t\n\n(* for use outside of bonsai computation *)\nval update : 'a t -> f:('a -> 'a) -> unit\nval set : 'a t -> 'a -> unit\nval get : 'a t -> 'a\n","lineNumber":"","type":"Snippet"},{"attentionType":"note","content":[{"type":"Paragraph","content":[{"text":"The actual call to ","type":"SimpleText"},{"code":"Url_var.Typed.make","type":"InlinedCode"},{"text":" must only run in a web-browser.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"This means that if you've factored your app out into a standard ","type":"SimpleText"},{"code":"lib/","type":"InlinedCode"},{"text":",","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"test/","type":"InlinedCode"},{"text":" ","type":"SimpleText"},{"code":"bin/","type":"InlinedCode"},{"text":" structure, then the ","type":"SimpleText"},{"code":"Url_var.Typed.make","type":"InlinedCode"},{"text":" function should","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"be located in ","type":"SimpleText"},{"code":"bin/","type":"InlinedCode"},{"text":". If you stick it in the ","type":"SimpleText"},{"code":"lib/","type":"InlinedCode"},{"text":" section, then tests","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"in ","type":"SimpleText"},{"code":"test/","type":"InlinedCode"},{"text":" may fail because the url-var can't deal with being in an","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"expect-test environment.","type":"SimpleText"}]}],"type":"AttentionBlock"},{"attentionType":"note","content":[{"type":"Paragraph","content":[{"text":"If you are using cohttp_static_handler's Single_page_handler to serve","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"your page, it will redirect unknown urls on its own which prevents","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"url_var from doing any parsing/error handling. You can get around this","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"by setting the ","type":"SimpleText"},{"code":"on_unknown_url","type":"InlinedCode"},{"text":" parameter to ","type":"SimpleText"},{"code":"`Index","type":"InlinedCode"}]},{"lang":"","snippet":"Single_page_handler.create_handler\n   ~title:<title>\n   ~assets:<assets>\n   ~on_unknown_url:`Index\n","lineNumber":"","type":"Snippet"}],"type":"AttentionBlock"},{"id":"typed-field-parse-unparse-what-is-a-path-and-what-is-a-query","level":2,"title":"What is a path and what is a query?","type":"SubHeading"},{"type":"Paragraph","content":[{"text":"URLs have lots of different","type":"SimpleText"},{"type":"SoftLineBreak"},{"url":"https://developer.mozilla.org/en-US/docs/Learn/Common_questions/What_is_a_URL","isFile":false,"type":"Link","content":[{"text":"parts","type":"SimpleText"}]},{"text":":","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"However, URL Var only focuses on two of them, the path and the query.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Given ","type":"SimpleText"},{"code":"example.com/path/to/my/file?key1=value1&key2=value2&key3=value3","type":"InlinedCode"},{"type":"SoftLineBreak"},{"text":"has the following parts: - Path ","type":"SimpleText"},{"code":"path/to/my/file","type":"InlinedCode"},{"text":" - Query","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"?key1=value1&key2=value2&key3=value3","type":"InlinedCode"}]},{"type":"Paragraph","content":[{"text":"In the eyes of URL Var, a path is a list of strings separated by ","type":"SimpleText"},{"code":"/","type":"InlinedCode"},{"text":",","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"and a query is a key-value pair list separated by ","type":"SimpleText"},{"code":"&","type":"InlinedCode"},{"text":". The functions in","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"the Typed API make heavy use of this terminology.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"The ","type":"SimpleText"},{"code":"path","type":"InlinedCode"},{"text":" and ","type":"SimpleText"},{"code":"query","type":"InlinedCode"},{"text":" together are represented like this:","type":"SimpleText"}]},{"lang":"","snippet":"module Components = struct\n  type t =\n    { path : string list\n    ; query : string list String.Map.t\n    }\nend\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"Something that's weird about the above representation is that the query","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"is a string-to-string-list pairing instead of a string-to-string","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"pairing. The reason for this is weird. What should ","type":"SimpleText"},{"code":"\"?a=1&a=2&a=3\"","type":"InlinedCode"},{"type":"SoftLineBreak"},{"text":"parse to? Some browsers parse this to ","type":"SimpleText"},{"code":"{a : [1, 2, 3]}","type":"InlinedCode"},{"text":", others drop all","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"of the duplicate instances except one, others even ","type":"SimpleText"},{"url":"https://stackoverflow.com/questions/32572264/what-might-be-shufflling-my-query-string-parameters-constructed-in-javascript","isFile":false,"type":"Link","content":[{"text":"shuffle the keys as","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"an anti-tracking","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"measure","type":"SimpleText"}]},{"text":".","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"URL Var disallows repeated keys. When you use ","type":"SimpleText"},{"code":"from_query_many","type":"InlinedCode"},{"text":" the URL","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"shape it expects is ","type":"SimpleText"},{"code":"\"?a=1,2,3\"","type":"InlinedCode"},{"text":" instead of ","type":"SimpleText"},{"code":"\"?a=1&a=2&a=3\"","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"attentionType":"note","content":[{"type":"Paragraph","content":[{"text":"When should you put something in the path vs. in the query? There's no","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"right and wrong answer, ultimately it's a matter of taste: a URL like","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"website.com/profile/capybara_lover123","type":"InlinedCode"},{"text":" feels better than","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"website.com?profile=capybara_lover123","type":"InlinedCode"},{"text":" and likewise ","type":"SimpleText"},{"code":"posts?after=dec-2","type":"InlinedCode"},{"type":"SoftLineBreak"},{"text":"is preferable to ","type":"SimpleText"},{"code":"posts/after/dec-2","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"A good rule of thumb is that paths should be used for things that are","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"\"resource-like\", and query-parameters be used for optional or","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"configurable parameters to that resource.","type":"SimpleText"}]}],"type":"AttentionBlock"},{"id":"typed-field-parse-unparse-records","level":2,"title":"Records","type":"SubHeading"},{"type":"Paragraph","content":[{"text":"If you want to parse/unparse your URL or a part of your URL as a record","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"you can use the ","type":"SimpleText"},{"code":"Parser.Record","type":"InlinedCode"},{"text":" module which needs you to derive","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"typed_fields","type":"InlinedCode"},{"text":" on your record type.","type":"SimpleText"}]},{"lang":"ocaml","snippet":"  module My_google_clone = struct\n    type t =\n      { query : string\n      ; language : string\n      }\n    [@@deriving typed_fields, sexp, equal]\n\n    let parser_for_field : type a. a Typed_field.t -> a Parser.t = function\n      | Query -> Parser.from_query_required ~key:\"q\" Value_parser.string\n      | Language -> Parser.from_query_required Value_parser.string\n    ;;\n\n    module Path_order = Parser.Record.Path_order (Typed_field)\n\n    let path_order = Path_order.T []\n  end\n\n  let parser = Parser.Record.make (module My_google_clone)\n\n  let%expect_test _ =\n    Parser.check_ok_and_print_urls_or_errors parser;\n    [%expect\n      {|\n      URL parser looks good!\n      ┌────────────────────────────────┐\n      │ All urls                       │\n      ├────────────────────────────────┤\n      │ /?language=<string>&q=<string> │\n      └────────────────────────────────┘ |}]\n  ;;\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"The key of ","type":"SimpleText"},{"code":"Query","type":"InlinedCode"},{"text":" is ","type":"SimpleText"},{"code":"\"q\"","type":"InlinedCode"},{"text":" since it's explicitly given through the","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"key","type":"InlinedCode"},{"text":" optional parameter. The key of ","type":"SimpleText"},{"code":"Language","type":"InlinedCode"},{"text":" is ","type":"SimpleText"},{"code":"\"language\"","type":"InlinedCode"},{"text":" which","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"was inferred with the help of ","type":"SimpleText"},{"code":"typed_fields","type":"InlinedCode"},{"text":" since no ","type":"SimpleText"},{"code":"key","type":"InlinedCode"},{"text":" was given.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"code":"path_order","type":"InlinedCode"},{"text":" is not really doing anything right now, but will be useful","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"shortly.","type":"SimpleText"}]},{"attentionType":"note","content":[{"type":"Paragraph","content":[{"text":"The ","type":"SimpleText"},{"code":": type a. a Typed_field.t -> a Parser.t","type":"InlinedCode"},{"text":" type annotation might be","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"confusing if it's the first time you see it, but the good and bad thing","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"is that it's always the same annotation. The reason that this annotation","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"is needed is because ","type":"SimpleText"},{"code":"'a Typed_field.t","type":"InlinedCode"},{"text":" is a GADT, which results in each","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"of its constructors having different types which can result in weird","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"type errors without the explicit annotation. There are cool internal","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"talks and resources that go over this topic in more detail, but for now,","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"it's totally fine to just always type the same type annotation","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"type a. a Typed_field.t -> a Parser.t","type":"InlinedCode"},{"text":".","type":"SimpleText"}]}],"type":"AttentionBlock"},{"type":"Paragraph","content":[{"text":"It might be good to have [language] have its own type. We can use","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"Parser.project","type":"InlinedCode"},{"text":" or ","type":"SimpleText"},{"code":"Value_parser.project","type":"InlinedCode"},{"text":" to change their types.","type":"SimpleText"}]},{"lang":"ocaml","snippet":"  module My_google_clone = struct\n    module Language : sig\n      type t [@@deriving sexp, equal]\n\n      val to_string : t -> string\n      val of_string : string -> t\n    end = struct\n      include String\n    end\n\n    type t =\n      { query : string\n      ; language : Language.t\n      }\n    [@@deriving typed_fields, sexp, equal]\n\n    let parser_for_field : type a. a Typed_field.t -> a Parser.t = function\n      | Query -> Parser.from_query_required ~key:\"q\" Value_parser.string\n      | Language ->\n        Parser.from_query_required\n          (Value_parser.project\n             Value_parser.string\n             ~parse_exn:Language.of_string\n             ~unparse:Language.to_string)\n    ;;\n\n    module Path_order = Parser.Record.Path_order (Typed_field)\n\n    let path_order = Path_order.T []\n  end\n\n  let parser = Parser.Record.make (module My_google_clone)\n\n  let%expect_test _ =\n    Parser.check_ok_and_print_urls_or_errors parser;\n    [%expect\n      {|\n      URL parser looks good!\n      ┌─────────────────────────────────────────┐\n      │ All urls                                │\n      ├─────────────────────────────────────────┤\n      │ /?language=<project<string>>&q=<string> │\n      └─────────────────────────────────────────┘ |}]\n  ;;\n","lineNumber":"","type":"Snippet"},{"attentionType":"note","content":[{"type":"Paragraph","content":[{"text":"We could've also used ","type":"SimpleText"},{"code":"Value_parser.stringable (module Language)","type":"InlinedCode"},{"text":" as a","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"shorthand for projecting stringable types. On a similar note,","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"Value_parser","type":"InlinedCode"},{"text":" also provides other primitives like ","type":"SimpleText"},{"code":"sexpable","type":"InlinedCode"},{"text":" and","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"binable_via_base64","type":"InlinedCode"},{"text":", ","type":"SimpleText"},{"code":"int","type":"InlinedCode"},{"text":", ","type":"SimpleText"},{"code":"float","type":"InlinedCode"},{"text":", and others.","type":"SimpleText"}]}],"type":"AttentionBlock"},{"type":"Paragraph","content":[{"text":"Right now, we are taking both fields the query, but you might want to","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"design your URL such that users see ","type":"SimpleText"},{"code":"google.com/en/?q=capybara","type":"InlinedCode"},{"text":" instead","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"of ","type":"SimpleText"},{"code":"google.com/?language=en&q=capybara","type":"InlinedCode"},{"text":". Instead of","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"from_query_required","type":"InlinedCode"},{"text":", we can use ","type":"SimpleText"},{"code":"from_path","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"lang":"ocaml","snippet":"  module My_google_clone = struct\n    module Language : sig\n      type t [@@deriving sexp, equal]\n\n      val to_string : t -> string\n      val of_string : string -> t\n    end = struct\n      include String\n    end\n\n    type t =\n      { query : string\n      ; language : Language.t\n      }\n    [@@deriving typed_fields, sexp, equal]\n\n    let parser_for_field : type a. a Typed_field.t -> a Parser.t = function\n      | Query -> Parser.from_query_required ~key:\"q\" Value_parser.string\n      | Language ->\n        Parser.from_path\n          (Value_parser.project\n             Value_parser.string\n             ~parse_exn:Language.of_string\n             ~unparse:Language.to_string)\n    ;;\n\n    module Path_order = Parser.Record.Path_order (Typed_field)\n\n    let path_order = Path_order.T []\n  end\n\n  let parser = Parser.Record.make (module My_google_clone)\n\n  let%expect_test _ =\n    Parser.check_ok_and_print_urls_or_errors parser;\n    [%expect\n      {|\n      Error with parser.\n      ┌────────────────────────┬───────────────────────────────────────────────────────────────────────────────────────┐\n      │ Check name             │ Error message                                                                         │\n      ├────────────────────────┼───────────────────────────────────────────────────────────────────────────────────────┤\n      │ Sane path orders check │ (\"Each path parser must be present in path order. The following fields were missing:\" │\n      │                        │  (missing_fields (Language)))                                                         │\n      └────────────────────────┴───────────────────────────────────────────────────────────────────────────────────────┘ |}]\n  ;;\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"We get an error! The reason for this is that, unlike query fields where","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"keys can be parsed and unparsed in any order since it's a","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"string list String.Map.t","type":"InlinedCode"},{"text":" under the hood, the path is just a","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"string list","type":"InlinedCode"},{"text":" where the order in which you parse things matters. A URL","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"like ","type":"SimpleText"},{"code":"google.com/search/en","type":"InlinedCode"},{"text":" is different from ","type":"SimpleText"},{"code":"google.com/en/search","type":"InlinedCode"},{"text":". If","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"you take multiple fields from the path, then you need to specify the","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"order in which they should be parsed and unparsed in.","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"check_ok_and_print_urls_or_errors","type":"InlinedCode"},{"text":" will let you know about any issues","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"statically. Here the problem can be fixed by adding ","type":"SimpleText"},{"code":"Language","type":"InlinedCode"},{"text":" to","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"path_order","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"lang":"ocaml","snippet":"  module My_google_clone = struct\n    module Language : sig\n      type t [@@deriving sexp, equal]\n\n      val to_string : t -> string\n      val of_string : string -> t\n    end = struct\n      include String\n    end\n\n    type t =\n      { query : string\n      ; language : Language.t\n      }\n    [@@deriving typed_fields, sexp, equal]\n\n    let parser_for_field : type a. a Typed_field.t -> a Parser.t = function\n      | Query -> Parser.from_query_required ~key:\"q\" Value_parser.string\n      | Language ->\n        Parser.from_path\n          (Value_parser.project\n             Value_parser.string\n             ~parse_exn:Language.of_string\n             ~unparse:Language.to_string)\n    ;;\n\n    module Path_order = Parser.Record.Path_order (Typed_field)\n\n    let path_order = Path_order.T [ Language ]\n  end\n\n  let parser = Parser.Record.make (module My_google_clone)\n\n  let%expect_test _ =\n    Parser.check_ok_and_print_urls_or_errors parser;\n    [%expect\n      {|\n      URL parser looks good!\n      ┌───────────────────────────────┐\n      │ All urls                      │\n      ├───────────────────────────────┤\n      │ /<project<string>>?q=<string> │\n      └───────────────────────────────┘ |}]\n  ;;\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"Finally, although it's not ergonomic in this example, it's worth","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"mentioning what happens when you nest records.","type":"SimpleText"}]},{"lang":"ocaml","snippet":"  module Nested = struct\n    type t =\n      { foo : string\n      ; bar : int\n      }\n    [@@deriving typed_fields, sexp, equal]\n\n    let parser_for_field : type a. a Typed_field.t -> a Parser.t = function\n      | Foo -> Parser.from_query_required Value_parser.string\n      | Bar -> Parser.from_query_required Value_parser.int\n    ;;\n\n    module Path_order = Parser.Record.Path_order (Typed_field)\n\n    let path_order = Path_order.T []\n  end\n\n  module Parent = struct\n    type t =\n      { a : Nested.t\n      ; b : Nested.t\n      }\n    [@@deriving typed_fields, equal, sexp]\n\n    let parser_for_field : type a. a Typed_field.t -> a Parser.t = function\n      | A -> Parser.Record.make (module Nested)\n      | B -> Parser.Record.make (module Nested)\n    ;;\n\n    module Path_order = Parser.Record.Path_order (Typed_field)\n\n    let path_order = Path_order.T []\n  end\n\n  let parser = Parser.Record.make (module Parent)\n\n  let%expect_test _ =\n    Parser.check_ok_and_print_urls_or_errors parser;\n    [%expect\n      {|\n      URL parser looks good!\n      ┌─────────────────────────────────────────────────────────┐\n      │ All urls                                                │\n      ├─────────────────────────────────────────────────────────┤\n      │ /?a.bar=<int>&a.foo=<string>&b.bar=<int>&b.foo=<string> │\n      └─────────────────────────────────────────────────────────┘ |}]\n  ;;\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"Records nested inside of other records are namespaced on top of each","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"other, but the namespace can be changed/be overridden with the optional","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"parameter ","type":"SimpleText"},{"code":"~namespace","type":"InlinedCode"},{"text":" on ","type":"SimpleText"},{"code":"Parser.Record.make","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"id":"typed-field-parse-unparse-variants","level":2,"title":"Variants","type":"SubHeading"},{"type":"Paragraph","content":[{"text":"If you want to parse/unparse your URL or a part of your URL as a variant","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"you can use the ","type":"SimpleText"},{"code":"Parser.Variant","type":"InlinedCode"},{"text":" module which needs you to derive","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"typed_variants","type":"InlinedCode"},{"text":" on your variant type.","type":"SimpleText"}]},{"lang":"ocaml","snippet":"  module My_google_clone = struct\n    type t =\n      | Homepage\n      | Search\n      | Maps\n    [@@deriving typed_variants, sexp, equal]\n\n    let parser_for_variant : type a. a Typed_variant.t -> a Parser.t = function\n      | Homepage -> Parser.unit\n      | Search -> Parser.unit\n      | Maps -> Parser.unit\n    ;;\n  end\n\n  let parser = Parser.Variant.make (module My_google_clone)\n\n  let%expect_test _ =\n    Parser.check_ok_and_print_urls_or_errors parser;\n    [%expect\n      {|\n    URL parser looks good!\n    ┌───────────┐\n    │ All urls  │\n    ├───────────┤\n    │ /homepage │\n    │ /maps     │\n    │ /search   │\n    └───────────┘ |}]\n  ;;\n","lineNumber":"","type":"Snippet"},{"attentionType":"note","content":[{"type":"Paragraph","content":[{"code":"Parser.unit","type":"InlinedCode"},{"text":" is a no-op parser for when you don't need to parse","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"anything. Its type is ","type":"SimpleText"},{"code":"unit Parser.t","type":"InlinedCode"},{"text":" and is useful when dealing with","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"variant constructors that don't have a payload.","type":"SimpleText"}]}],"type":"AttentionBlock"},{"type":"Paragraph","content":[{"text":"It would be nice if we could express a homepage as ","type":"SimpleText"},{"code":"google.com/","type":"InlinedCode"},{"text":" instead","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"of ","type":"SimpleText"},{"code":"google.com/homepage","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"lang":"ocaml","snippet":"  module My_google_clone = struct\n    type t =\n      | Homepage\n      | Search\n      | Maps\n    [@@deriving typed_variants, sexp, equal]\n\n    let parser_for_variant : type a. a Typed_variant.t -> a Parser.t = function\n      | Homepage -> Parser.end_of_path Parser.unit\n      | Search -> Parser.unit\n      | Maps -> Parser.unit\n    ;;\n  end\n\n  let parser = Parser.Variant.make (module My_google_clone)\n\n  let%expect_test _ =\n    Parser.check_ok_and_print_urls_or_errors parser;\n    [%expect\n      {|\n    URL parser looks good!\n    ┌──────────┐\n    │ All urls │\n    ├──────────┤\n    │ /        │\n    │ /maps    │\n    │ /search  │\n    └──────────┘ |}]\n  ;;\n","lineNumber":"","type":"Snippet"},{"attentionType":"note","content":[{"type":"Paragraph","content":[{"text":"The path identifiers for ","type":"SimpleText"},{"code":"Maps","type":"InlinedCode"},{"text":" and ","type":"SimpleText"},{"code":"Search","type":"InlinedCode"},{"text":" were inferred with the help","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"of ","type":"SimpleText"},{"code":"typed_variants","type":"InlinedCode"},{"text":", and the homepage identifier was overridden with","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"end_of_path","type":"InlinedCode"},{"text":". When something gets inferred vs when it's overridden can","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"be tricky to reason about, but the way it works is that the \"pattern\" to","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"match will be inferred unless the following combinators are used: -","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"with_remaining_path pattern","type":"InlinedCode"},{"text":" expects the remaining path to be equal to","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"pattern","type":"InlinedCode"},{"text":". - ","type":"SimpleText"},{"code":"with_prefix pattern","type":"InlinedCode"},{"text":" expects the remaining path to have","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"pattern","type":"InlinedCode"},{"text":" as its prefix. - ","type":"SimpleText"},{"code":"end_of_path","type":"InlinedCode"},{"text":" expect the remaining path to be","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"empty.","type":"SimpleText"}]}],"type":"AttentionBlock"},{"type":"Paragraph","content":[{"text":"It would be nice if we had payload on the URL like","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"google.com/search?query=capybara","type":"InlinedCode"},{"text":" or","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"google.com/maps?location=New_York","type":"InlinedCode"},{"text":". This can be accomplished with the","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"same combinators that the previous ","type":"SimpleText"},{"code":"Parser.Record","type":"InlinedCode"},{"text":" example used.","type":"SimpleText"}]},{"lang":"ocaml","snippet":"  module My_google_clone = struct\n    type t =\n      | Homepage\n      | Search of string\n      | Maps of string\n    [@@deriving typed_variants, sexp, equal]\n\n    let parser_for_variant : type a. a Typed_variant.t -> a Parser.t = function\n      | Homepage -> Parser.end_of_path Parser.unit\n      | Search -> Parser.from_query_required ~key:\"query\" Value_parser.string\n      | Maps -> Parser.from_query_required ~key:\"location\" Value_parser.string\n    ;;\n  end\n\n  let parser = Parser.Variant.make (module My_google_clone)\n\n  let%expect_test _ =\n    Parser.check_ok_and_print_urls_or_errors parser;\n    [%expect\n      {|\n    URL parser looks good!\n    ┌─────────────────────────┐\n    │ All urls                │\n    ├─────────────────────────┤\n    │ /                       │\n    │ /maps?location=<string> │\n    │ /search?query=<string>  │\n    └─────────────────────────┘ |}]\n  ;;\n","lineNumber":"","type":"Snippet"},{"id":"typed-field-parse-unparse-static-checks-on-your-url-parsing-unparsing","level":2,"title":"Static checks on your url parsing/unparsing","type":"SubHeading"},{"type":"Paragraph","content":[{"code":"Parser.check_ok_and_print_urls_or_errors","type":"InlinedCode"},{"text":" will check for any","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"ambiguity/weirdness in your parser. You'll also be able to see if the","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"urls your site supports changes unexpectedly. The library tends to infer","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"things off of the names of your types. For instance, paths are sometimes","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"inferred from constructor names, but can be overridden with","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"end_of_path","type":"InlinedCode"},{"text":", ","type":"SimpleText"},{"code":"with_prefix","type":"InlinedCode"},{"text":" or ","type":"SimpleText"},{"code":"with_remaining_path","type":"InlinedCode"},{"text":". The rules for how","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"this works are specified in the MLI, but it's a lot nicer to explicitly","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"see the shapes of your url in an expect test.","type":"SimpleText"}]},{"lang":"ocaml","snippet":"module Ambiguous_url = struct\n  type t =\n    | Foo\n    | Bar\n  [@@deriving typed_variants, sexp, equal]\n\n  let parser_for_variant : type a. a Typed_variant.t -> a Parser.t = function\n    | Foo -> Parser.with_prefix [ \"x\" ] Parser.unit\n    | Bar -> Parser.with_prefix [ \"x\" ] Parser.unit\n  ;;\nend\n\nlet parser = Parser.Variant.make (module Ambiguous_url)\n\nlet%expect_test _ =\n  Parser.check_ok_and_print_urls_or_errors parser;\n  [%expect\n    {|\n    Error with parser.\n    ┌─────────────────────────────────────────────────────────┬──────────────────────────────────────────────────────────────────────────────────────────┐\n    │ Check name                                              │ Error message                                                                            │\n    ├─────────────────────────────────────────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤\n    │ Ambiguous choices for picking variant constructor check │ (\"Duplicate patterns found!\"                                                             │\n    │                                                         │  (duplicate_patterns (((pattern ((Match x))) (needed_match Prefix)))))                   │\n    │ Duplicate urls check                                    │ (\"Ambiguous, duplicate urls expressed in parser! This was probably caused due to conflic │\n    │                                                         │ ting renames with [with_prefix] or [with_remaining_path].\"                               │\n    │                                                         │  (duplicate_urls (/x)))                                                                  │\n    └─────────────────────────────────────────────────────────┴──────────────────────────────────────────────────────────────────────────────────────────┘ |}]\n;;\n","lineNumber":"","type":"Snippet"},{"id":"typed-field-parse-unparse-no-more-broken-links-in-documents","level":2,"title":"No more broken links in documents","type":"SubHeading"},{"type":"Paragraph","content":[{"text":"As your site changes, it's likely that your parser will also change,","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"which introduces the possibility that old urls no longer parse! Broken","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"urls in your users' documents is not fun, but you can guard against this","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"by using ","type":"SimpleText"},{"code":"Versioned_parser","type":"InlinedCode"},{"text":" to \"stabilize\" them.","type":"SimpleText"}]},{"lang":"ocaml","snippet":"module V1 = struct\n  type t = Foo of string [@@deriving typed_variants, sexp, equal]\n\n  let parser_for_variant : type a. a Typed_variant.t -> a Parser.t = function\n    | Foo -> Parser.from_path Value_parser.string\n  ;;\nend\n\nlet v1_parser = Versioned_parser.first_parser (Parser.Variant.make (module V1))\n\nmodule V2 = struct\n  type t = New_foo of string [@@deriving typed_variants, sexp, equal]\n\n  let parser_for_variant : type a. a Typed_variant.t -> a Parser.t = function\n    | New_foo -> Parser.from_path Value_parser.string\n  ;;\nend\n\nlet v2_parser =\n  Versioned_parser.new_parser\n    (Parser.Variant.make (module V2))\n    ~previous:v1_parser\n    ~f:(function\n      | Foo s -> New_foo s)\n;;\n\nlet%expect_test _ =\n  Versioned_parser.check_ok_and_print_urls_or_errors v2_parser;\n  [%expect\n    {|\n    URL parser looks good!\n    ┌───────────────────┐\n    │ All urls          │\n    ├───────────────────┤\n    │ /new_foo/<string> │\n    └───────────────────┘\n\n           |\n    falls back to\n           |\n           v\n\n    URL parser looks good!\n    ┌───────────────┐\n    │ All urls      │\n    ├───────────────┤\n    │ /foo/<string> │\n    └───────────────┘ |}]\n;;\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"If you're migrating your site from the non-typed URL var into the","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"Typed","type":"InlinedCode"},{"text":" version of the API, then you cannot use","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"Versioned_parser.first_parser","type":"InlinedCode"},{"text":" since you won't already have a","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"Typed.Parser","type":"InlinedCode"},{"text":". But no worries! You can use","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"Versioned_parsed.of_non_typed_parser","type":"InlinedCode"},{"text":" instead of","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"Versioned_parser.first_parser","type":"InlinedCode"}]},{"id":"typed-field-parse-unparse-more-resources","level":2,"title":"More resources","type":"SubHeading"},{"type":"Paragraph","content":[{"text":"The MLI is quite long, so here are some pointers to save you time!","type":"SimpleText"}]},{"bulletMarker":"-","tight":true,"type":"BulletList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"code":"I want my URL type to be a record!","type":"InlinedCode"},{"text":" -> You should look for","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"Typed.Record.make","type":"InlinedCode"},{"text":" in the MLI/demo page.","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"code":"I want my URL to take things from the path (e.g. \"/profile/capybara_lover123\" or   \"/profile/chinchilla_was_taken\" or \"profile/<string>\")","type":"InlinedCode"},{"type":"SoftLineBreak"},{"text":"-> You can use ","type":"SimpleText"},{"code":"Parser.from_path","type":"InlinedCode"},{"text":" and ","type":"SimpleText"},{"code":"Parser.from_remaining_path","type":"InlinedCode"},{"type":"SoftLineBreak"},{"text":"for the \"variable parts\" of the path and ","type":"SimpleText"},{"code":"with_prefix","type":"InlinedCode"},{"text":" and","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"with_remaining_path","type":"InlinedCode"},{"text":" for the \"constant\" parts. Examples are in demo","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"page + better explanation in MLI.","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"code":"I want my URL type to be made up of something other than the provided primitives!","type":"InlinedCode"},{"type":"SoftLineBreak"},{"text":"-> ","type":"SimpleText"},{"code":"Value_parser.project","type":"InlinedCode"},{"text":" or ","type":"SimpleText"},{"code":"Parser.project","type":"InlinedCode"},{"text":" should do the trick!","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"code":"What are all the provided primitives??","type":"InlinedCode"},{"text":" -> These primitives are","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"located and documented in ","type":"SimpleText"},{"code":"Value_parser","type":"InlinedCode"},{"text":".","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"code":"What order do the parsers/unparsers run?","type":"InlinedCode"},{"text":" -> Preorder-like order.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Records' fields are weirder since the order you parse the record's","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"fields might lead to different results, you can specify the order","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"through ","type":"SimpleText"},{"code":"path_order","type":"InlinedCode"},{"text":".","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"code":"I want my [Value_parser] to recover from failure.","type":"InlinedCode"},{"text":" -> You can use","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"Value_parser.fallback","type":"InlinedCode"},{"text":" to provide a default value to use when the","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"parser fails.","type":"SimpleText"}]}]}]}]}],"lastModifiedTime":1695640585140,"tocItem":{"chapterTitle":"Guide","pageTitle":"URL Routing","pageMeta":{"title":["URL Routing"]},"dirName":"guide","fileName":"10-url-routing","viewOnRelativePath":null,"pageSectionIdTitles":[{"title":"Handwritten Parse / Unparse","id":"handwritten-parse-unparse"},{"title":"Typed field Parse / Unparse","id":"typed-field-parse-unparse"}]}},{"type":"Page","content":[{"type":"Paragraph","content":[{"text":"Historically, the recommended structure of a web app that sends RPCs was","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"something like this:","type":"SimpleText"}]},{"delimiter":".","startNumber":1,"type":"OrderedList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Use ","type":"SimpleText"},{"code":"persistent_connection","type":"InlinedCode"},{"text":" to establish a connection the server and","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"client can use to communicate.","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Thread that connection as an argument through the whole codebase so","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"that RPCs can be dispatched directly from anywhere. By threading the","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"connection as an argument instead of always referencing a global","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"connection value, we can pass in a different connection for testing","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"purposes; otherwise test code would have to spin up a server","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"process, which would add an unfortunate amount of non-determinism","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"and awkwardness to each test.","type":"SimpleText"}]}]}]},{"type":"Paragraph","content":[{"text":"The ","type":"SimpleText"},{"code":"Rpc_effect","type":"InlinedCode"},{"text":" module adds a couple refinements to make this approach","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"more ergonomic:","type":"SimpleText"}]},{"delimiter":".","startNumber":3,"type":"OrderedList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Instead of explicitly threading the connection through the whole","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"app, ","type":"SimpleText"},{"code":"Rpc_effect","type":"InlinedCode"},{"text":" uses a dynamic-scoping construct built into Bonsai","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"that allows code to pull the connection \"out of thin air\". This","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"reduces parameter-passing noise, at the cost of some extra noise","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"anytime something dispatches an RPC.","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"The module will create connections for you, which reduces the","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"typical app setup boilerplate.","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"code":"Bonsai_web_test.Handle.create","type":"InlinedCode"},{"text":" optionally accepts a set of RPC","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"implementations, thus eliminating the boilerplate of setting up a","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"connection that works in tests.","type":"SimpleText"}]}]}]},{"id":"example-1-doubling-a-number","title":"Example 1: Doubling a number","type":"Section","content":[{"type":"Paragraph","content":[{"text":"In this example, we will build the UI shown below. It has a button that","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"sends the current number as an RPC query and sets the number to whatever","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"number is in the response that comes back.","type":"SimpleText"}]},{"src":"/bonsai/bonsai-build/#double-the-number-rpc","fit":true,"light":{"background":"#e9edf2","color-scheme":"light","color":"#28487c"},"dark":{"background":"#101318","color-scheme":"dark","color":"#bac9e2"},"type":"Iframe"},{"type":"Paragraph","content":[{"text":"The first step is to define an RPC that is shared between the server and","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"client code.","type":"SimpleText"}]},{"lang":"ocaml","snippet":"let double_rpc =\n  Rpc.Rpc.create\n    ~name:\"double\"\n    ~version:0\n    ~bin_query:[%bin_type_class: int]\n    ~bin_response:[%bin_type_class: int]\n;;\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"Next, we provide the server's implementation of the RPC.","type":"SimpleText"}]},{"lang":"ocaml","snippet":"let double_implementation =\n  Rpc.Rpc.implement' double_rpc (fun _connection_state query -> Int.max 1 (query * 2))\n;;\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"On the client side, we start by picking a server to send our RPCs to.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Most users will pick ","type":"SimpleText"},{"code":"Self","type":"InlinedCode"},{"text":", which causes RPCs to be sent to the same","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"server hosting the web page itself.","type":"SimpleText"}]},{"lang":"ocaml","snippet":"let where_to_connect : Rpc_effect.Where_to_connect.t = Self\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"Finally, we can build the client side of the app.","type":"SimpleText"}]},{"lang":"ocaml","snippet":"let app =\n  let%sub dispatch_double_rpc = Rpc_effect.Rpc.dispatcher double_rpc ~where_to_connect in\n  let%sub number, set_number = Bonsai.state ~equal:[%equal: int] 1 in\n  let%arr dispatch_double_rpc = dispatch_double_rpc\n  and number = number\n  and set_number = set_number in\n  Vdom.Node.div\n    [ Vdom.Node.div [ Vdom.Node.text [%string \"The number is: %{number#Int}\"] ]\n    ; Vdom.Node.button\n        ~attrs:\n          [ Vdom.Attr.on_click (fun _ ->\n              match%bind.Effect dispatch_double_rpc number with\n              | Ok doubled_number -> set_number doubled_number\n              | Error error -> Effect.of_sync_fun eprint_s [%sexp (error : Error.t)])\n          ]\n        [ Vdom.Node.text \"Double the number\" ]\n    ]\n;;\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"The one line worth highlighting is the one that makes the","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"RPC-dispatching effect.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"code":"ocaml skip let%sub dispatch_double_rpc = Rpc_effect.Rpc.dispatcher Protocol.double ~where_to_connect in","type":"InlinedCode"}]},{"type":"Paragraph","content":[{"text":"This does not by itself dispatch an RPC; rather, it merely produces a","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"'query -> 'response Effect.t","type":"InlinedCode"},{"text":" function that will do the dispatching.","type":"SimpleText"}]}]},{"id":"polling-state-rpc","title":"Polling State RPC","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Bonsai apps often use a library called ","type":"SimpleText"},{"code":"polling_state_rpc","type":"InlinedCode"},{"text":" whenever they","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"want to keep up to date with a source of data. The library provides a","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"similar abstraction to the ","type":"SimpleText"},{"code":"Pipe_rpc","type":"InlinedCode"},{"text":" or ","type":"SimpleText"},{"code":"State_rpc","type":"InlinedCode"},{"text":" modules that come","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"built into ","type":"SimpleText"},{"code":"async_rpc_kernel","type":"InlinedCode"},{"text":", but with tradeoffs that are more suitable","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"for web clients.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Both ","type":"SimpleText"},{"code":"Pipe_rpc","type":"InlinedCode"},{"text":" and ","type":"SimpleText"},{"code":"State_rpc","type":"InlinedCode"},{"text":" operate by pushing streams of updates","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"through the connection; the client can then consume this stream of","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"events as appropriate. This approach works great if the client is able","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"to keep up with the stream of events, as is often the case with native","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"programs. However, web clients are interesting in that they frequently","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"get backgrounded; if the user switches away from a browser tab, the","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Bonsai rendering loop, which relies on the browser's","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"requestAnimationFrame","type":"InlinedCode"},{"text":" function, slows down to a crawl. If the app uses","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"State_rpc","type":"InlinedCode"},{"text":", then when the tab eventually comes back to the foreground,","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"it might have a large queue of events, which will cause it to freeze","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"while it catches up.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"The ","type":"SimpleText"},{"code":"polling_state_rpc","type":"InlinedCode"},{"text":" library solves this problem by having the client","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"say when it is ready for more data by explicitly requesting updates from","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"the server. This allows the server to give the client a condensed view","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"of everything that happened since the last time it requested data.","type":"SimpleText"}]}]},{"id":"example-2-display-the-current-time","title":"Example 2: Display the current time","type":"Section","content":[{"type":"Paragraph","content":[{"text":"This next example will build a UI that monitors the current time","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"reported by the server, in order to provide a concrete example of using","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"the ","type":"SimpleText"},{"code":"polling_state_rpc","type":"InlinedCode"},{"text":" library.","type":"SimpleText"}]},{"src":"/bonsai/bonsai-build/#poll-the-current-time","fit":true,"light":{"background":"#e9edf2","color-scheme":"light","color":"#28487c"},"dark":{"background":"#101318","color-scheme":"dark","color":"#bac9e2"},"type":"Iframe"},{"type":"Paragraph","content":[{"text":"Ten times a second, the client sends the timezone text as a poll query","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"to the server, to which it responds with the current time formatted in","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"the specified zone. Ordinarily the form would be more structured so that","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"the user can't accidentally send the server an invalid form; however,","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"this UI does nothing of the sort, in order to illustrate how error","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"handling might work.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"As in the previous example, we will begin by setting up the RPC","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"definition. The point of interest in this case is that we must provide a","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"module for the response type that satisfies the ","type":"SimpleText"},{"code":"Diffable.S","type":"InlinedCode"},{"text":" module type","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"(from the ","type":"SimpleText"},{"code":"diffable","type":"InlinedCode"},{"text":" library).","type":"SimpleText"}]},{"lang":"ocaml","snippet":"module Current_time = struct\n  include String\n  include Diffable.Atomic.Make (String)\nend\n\nlet current_time_rpc =\n  Polling_state_rpc.create\n    ~name:\"current_time\"\n    ~version:0\n    ~query_equal:[%equal: string]\n    ~bin_query:[%bin_type_class: string]\n    (module Current_time)\n;;\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"Next we provide a server implementation. A call to","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"Rpc.Implementation.lift","type":"InlinedCode"},{"text":" is common because the implementation you get","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"from ","type":"SimpleText"},{"code":"Polling_state_rpc.implement","type":"InlinedCode"},{"text":" requires a ","type":"SimpleText"},{"code":"'a * Rpc.Connection.t","type":"InlinedCode"},{"type":"SoftLineBreak"},{"text":"connection state.","type":"SimpleText"}]},{"lang":"ocaml","snippet":"let current_time_implementation =\n  Polling_state_rpc.implement\n    ~on_client_and_server_out_of_sync:print_s\n    current_time_rpc\n    (fun _connection_state zone ->\n       Deferred.return\n         (Time_ns.to_string_trimmed ~zone:(Timezone.of_string zone) (Time_ns.now ())))\n  |> Rpc.Implementation.lift ~f:(fun connection_state ->\n    connection_state, connection_state)\n;;\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"Finally, we can write the UI code. There are a couple important ways in","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"which this example is different from the previous one:","type":"SimpleText"}]},{"bulletMarker":"-","tight":false,"type":"BulletList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Rather than explicitly dispatching the RPC, we merely instantiate","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"the poller computation and allow it to send requests as necessary.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"It sends requests whenever the query (the timezone) changes, and","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"also at fixed intervals (every tenth of a second).","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Rather than having to dispatch the RPC to get the response or an","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"error, we get a couple constantly available values:","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"last_ok_response","type":"InlinedCode"},{"text":" and ","type":"SimpleText"},{"code":"last_error","type":"InlinedCode"},{"text":". Each of those values comes","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"packaged with the query it was a response to, since it might lag","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"slightly behind the most up-to-date query.","type":"SimpleText"}]}]}]},{"type":"Paragraph","content":[{"text":"The code omits the implementation of ","type":"SimpleText"},{"code":"zone_form","type":"InlinedCode"},{"text":", since that is not our","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"focus in this chapter.","type":"SimpleText"}]},{"lang":"ocaml","snippet":"let app =\n  let%sub zone, zone_view = zone_form in\n  let%sub { last_ok_response; last_error; inflight_query = _; refresh = _ } =\n    Rpc_effect.Polling_state_rpc.poll\n      current_time_rpc\n      ~equal_query:[%equal: string]\n      ~equal_response:[%equal: Current_time.t]\n      ~where_to_connect\n      ~every:(Time_ns.Span.of_sec 0.1)\n      zone\n  in\n  let%arr last_ok_response = last_ok_response\n  and last_error = last_error\n  and zone_view = zone_view in\n  let text =\n    match last_ok_response with\n    | Some (zone, current_time) ->\n      [%string \"The current time in the zone '%{zone}' is %{current_time}\"]\n    | None -> \"Loading...\"\n  in\n  let error_view =\n    match last_error with\n    | Some (zone, error) ->\n      Vdom.Node.div\n        ~attrs:[ Css.error_text ]\n        [ Vdom.Node.text [%string \"Got error when requesting time in zone '%{zone}'\"]\n        ; Vdom.Node.pre [ Vdom.Node.text (Error.to_string_hum error) ]\n        ]\n    | None -> Vdom.Node.none\n  in\n  Vdom.Node.div [ zone_view; Vdom.Node.div [ Vdom.Node.text text ]; error_view ]\n;;\n","lineNumber":"","type":"Snippet"}]},{"id":"example-3-testing-a-component-that-sends-rpcs","title":"Example 3: Testing a component that sends RPCs","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Let us return to the \"number doubler\" that we built in the first","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"example. In this section we will build some tests for that component.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Using knowledge from the testing chapter of the guide, our first attempt","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"might look like the code below.","type":"SimpleText"}]},{"lang":"ocaml","snippet":"let%expect_test \"Clicking the button should double the number\" =\n  let handle = Handle.create (Result_spec.vdom Fn.id) app in\n  Handle.show handle;\n  [%expect\n    {|\n    <div>\n      <div> The number is: 1 </div>\n      <button onclick> Double the number </button>\n    </div> |}];\n  Handle.click_on handle ~get_vdom:Fn.id ~selector:\"button\";\n  Handle.show handle;\n  [%expect\n    {|\n    <div>\n      <div> The number is: 1 </div>\n      <button onclick> Double the number </button>\n    </div> |}]\n;;\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"Sadly, it isn't this simple. The first reason is that since RPCs are","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"dispatched asynchronously, the test must itself be async. Native tests","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"would accomplish this by adding ","type":"SimpleText"},{"code":"open Async","type":"InlinedCode"},{"text":" at the top of the test","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"file, but since we're running in javascript, we have to use a different","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"library.","type":"SimpleText"}]},{"lang":"ocaml","snippet":"open Async_kernel\nopen Async_js_test\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"Here's what our attempt looks like now. In addition to the above module","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"imports, we also use ","type":"SimpleText"},{"code":"Async_kernel_scheduler.yield_until_no_jobs_remain","type":"InlinedCode"},{"type":"SoftLineBreak"},{"text":"to force any pending side-effects to happen before the test quits. If we","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"don't include that call, the output still gets printed, but after the","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"return ()","type":"InlinedCode"},{"text":", which means the test doesn't typecheck.","type":"SimpleText"}]},{"lang":"ocaml","snippet":"let%expect_test \"Clicking the button should double the number\" =\n  let handle = Handle.create (Result_spec.vdom Fn.id) app in\n  Handle.show handle;\n  [%expect\n    {|\n    <div>\n      <div> The number is: 1 </div>\n      <button onclick> Double the number </button>\n    </div> |}];\n  Handle.click_on handle ~get_vdom:Fn.id ~selector:\"button\";\n  Handle.show handle;\n  [%expect\n    {|\n    <div>\n      <div> The number is: 1 </div>\n      <button onclick> Double the number </button>\n    </div> |}];\n  let%bind () = Async_kernel_scheduler.yield_until_no_jobs_remain () in\n  [%expect {| \"RPC not handled because no connector has been provided.\" |}];\n  return ()\n;;\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"We're close, but we need to provide an implementation for the RPC that","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"the button tried to invoke. Thankfully, ","type":"SimpleText"},{"code":"double_implementation","type":"InlinedCode"},{"text":" from","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"earlier is still lying around, so we can simply use that. (In some apps","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"you might want to include a mock implementation that differs from the","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"real one.) We should also yield to the scheduler ","type":"SimpleText"},{"type":"Emphasis","content":[{"text":"before","type":"SimpleText"}]},{"text":" showing the","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"output, so that we can see the effect of the RPC completing.","type":"SimpleText"}]},{"lang":"ocaml","snippet":"let%expect_test \"Clicking the button should double the number\" =\n  let handle =\n    Handle.create\n      ~rpc_implementations:[ double_implementation ]\n      (Result_spec.vdom Fn.id)\n      app\n  in\n  Handle.show handle;\n  [%expect\n    {|\n    <div>\n      <div> The number is: 1 </div>\n      <button onclick> Double the number </button>\n    </div> |}];\n  Handle.click_on handle ~get_vdom:Fn.id ~selector:\"button\";\n  let%bind () = Async_kernel_scheduler.yield_until_no_jobs_remain () in\n  Handle.show handle;\n  [%expect\n    {|\n    <div>\n      <div> The number is: 2 </div>\n      <button onclick> Double the number </button>\n    </div> |}];\n  return ()\n;;\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"Hurrah! This test successfully demonstrates the effect of clicking the","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"button.","type":"SimpleText"}]},{"attentionType":"note","content":[{"type":"Paragraph","content":[{"text":"There are a lot more tricky things about asynchronous testing that this","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"chapter could cover, but we've opted to stop here. Admittedly, the tools","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"for testing with RPCs are still in their infancy, so if you have ideas","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"about how to make writing these tests easier, let us know.","type":"SimpleText"}]}],"type":"AttentionBlock"}]}],"lastModifiedTime":1695814062129,"tocItem":{"chapterTitle":"Guide","pageTitle":"RPCs","pageMeta":{"title":["RPCs"]},"dirName":"guide","fileName":"11-rpcs","viewOnRelativePath":null,"pageSectionIdTitles":[{"title":"Example 1: Doubling a number","id":"example-1-doubling-a-number"},{"title":"Polling State RPC","id":"polling-state-rpc"},{"title":"Example 2: Display the current time","id":"example-2-display-the-current-time"},{"title":"Example 3: Testing a component that sends RPCs","id":"example-3-testing-a-component-that-sends-rpcs"}]}}]